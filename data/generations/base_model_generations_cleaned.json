[
    {
        "question_id": 1471,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers",
        "Generated SQL": "SELECT\n  COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) / COUNT(*) AS EUR,\n  COUNT(CASE WHEN Currency = 'CZK' THEN 1 END) / COUNT(*) AS CZK\nFROM customers"
    },
    {
        "question_id": 1472,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "Generated SQL": "SELECT customers.Segment, SUM(yearmonth.Consumption)\nFROM customers\nJOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID\nWHERE yearmonth.Date BETWEEN '2012-01-01' AND '2012-12-31'\nGROUP BY customers.Segment\nORDER BY SUM(yearmonth.Consumption) ASC\nLIMIT 1"
    },
    {
        "question_id": 1473,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
        "Generated SQL": "SELECT\n  AVG(Consumption)\nFROM\n  yearmonth\nWHERE\n  CustomerID IN (\n    SELECT\n      CustomerID\n    FROM\n      customers\n    WHERE\n      Segment = 'SME'\n  )\n  AND Date BETWEEN '2013-01-01' AND '2013-12-31'"
    },
    {
        "question_id": 1476,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'",
        "Generated SQL": "SELECT\n  SUM(Consumption) AS CZK,\n  SUM(Consumption) AS EUR\nFROM\n  yearmonth\nWHERE\n  Date BETWEEN '2012-01-01' AND '2012-12-31'\nGROUP BY\n  Segment\nORDER BY\n  CZK DESC\nLIMIT 1"
    },
    {
        "question_id": 1479,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "Generated SQL": "SELECT year(Date) AS Year, sum(Consumption) AS Consumption\nFROM yearmonth\nGROUP BY Year\nORDER BY Consumption DESC\nLIMIT 1"
    },
    {
        "question_id": 1480,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "Generated SQL": "SELECT * FROM yearmonth\nWHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME')\nAND Date BETWEEN '2013-01-01' AND '2013-12-31'\nORDER BY Consumption DESC\nLIMIT 1"
    },
    {
        "question_id": 1481,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
        "Generated SQL": null
    },
    {
        "question_id": 1482,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
        "Generated SQL": null
    },
    {
        "question_id": 1483,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
        "Generated SQL": "SELECT SUM(Consumption)\nFROM yearmonth\nWHERE CustomerID = 6\nAND Date BETWEEN '2013-08-01' AND '2013-11-30'"
    },
    {
        "question_id": 1484,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'",
        "Generated SQL": "SELECT COUNT(*) FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'discount'"
    },
    {
        "question_id": 1486,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'",
        "Generated SQL": null
    },
    {
        "question_id": 1490,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
        "Generated SQL": "SELECT\n  COUNT(*)\nFROM\n  customers\nWHERE\n  Segment = 'LAM'\n  AND Consumption > 46.73"
    },
    {
        "question_id": 1493,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'",
        "Generated SQL": "SELECT\n  COUNT(*)\nFROM\n  yearmonth\nWHERE\n  Consumption > 528.3\n  AND Date BETWEEN '2012-02-01' AND '2012-02-28'\n  AND CustomerID IN (\n    SELECT\n      CustomerID\n    FROM\n      customers\n    WHERE\n      Segment = 'A'\n  )"
    },
    {
        "question_id": 1498,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
        "Generated SQL": "SELECT MAX(Consumption) FROM yearmonth WHERE Date LIKE '2012%'"
    },
    {
        "question_id": 1500,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'",
        "Generated SQL": null
    },
    {
        "question_id": 1501,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
        "Generated SQL": "SELECT DISTINCT Country\nFROM gasstations\nWHERE EXISTS (\n    SELECT 1\n    FROM transactions_1k\n    WHERE transactions_1k.GasStationID = gasstations.GasStationID\n    AND Date BETWEEN '2013-06-01' AND '2013-06-30'\n)"
    },
    {
        "question_id": 1505,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00",
        "Generated SQL": "SELECT COUNT(CustomerID)\nFROM customers\nWHERE Currency = 'EUR'\nAND Consumption > 1000"
    },
    {
        "question_id": 1506,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'",
        "Generated SQL": "SELECT products.Description\nFROM products\nINNER JOIN transactions_1k\nON products.ProductID = transactions_1k.ProductID\nINNER JOIN gasstations\nON gasstations.GasStationID = transactions_1k.GasStationID\nWHERE gasstations.Country = 'Czech Republic'"
    },
    {
        "question_id": 1507,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
        "Generated SQL": "SELECT DISTINCT Time FROM transactions_1k WHERE GasStationID = 11"
    },
    {
        "question_id": 1509,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
        "Generated SQL": "SELECT COUNT(*) FROM transactions_1k\nWHERE GasStationID IN (\n  SELECT GasStationID FROM gasstations\n  WHERE Country = 'Czech Republic'\n)\nAND Date > '2012-01-01'"
    },
    {
        "question_id": 1514,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
        "Generated SQL": "SELECT DISTINCT Currency\nFROM customers\nWHERE CustomerID IN (\n  SELECT CustomerID\n  FROM transactions_1k\n  WHERE Time = '16:25:00'\n  AND Date = '2012/8/24'\n)"
    },
    {
        "question_id": 1515,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'",
        "Generated SQL": null
    },
    {
        "question_id": 1521,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
        "Generated SQL": "SELECT COUNT(*) FROM transactions_1k\nWHERE CustomerID IN (\n  SELECT CustomerID FROM customers\n  WHERE Segment = 'CZE'\n)\nAND Date = '2012-08-26'\nAND Time BETWEEN '08:00:00' AND '09:00:00'"
    },
    {
        "question_id": 1524,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price  = 548.4",
        "Generated SQL": "SELECT\n  customers.Country\nFROM\n  customers\n  INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID\nWHERE\n  transactions_1k.Price = 548.4\n  AND transactions_1k.Date = '2012-08-24'"
    },
    {
        "question_id": 1525,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
        "Generated SQL": "SELECT\n  COUNT(*) / (SELECT COUNT(*) FROM customers) * 100\nFROM\n  customers\nWHERE\n  Currency = 'EUR' AND\n  Segment = 'A' AND\n  Date = '2012-08-25'"
    },
    {
        "question_id": 1526,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT CAST(SUM(IIF(SUBSTRING(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTRING(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTRING(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price  = 1513.12 )",
        "Generated SQL": "SELECT\n  (SELECT Consumption FROM yearmonth WHERE CustomerID = 634.8 AND Date = '2012-08-25') /\n  (SELECT Consumption FROM yearmonth WHERE CustomerID = 634.8 AND Date = '2013-08-25') - 1"
    },
    {
        "question_id": 1528,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations",
        "Generated SQL": "SELECT\n  100.0 * SUM(CASE WHEN Segment = \"premium\" THEN 1 ELSE 0 END) / COUNT(*)\nFROM\n  customers\nWHERE\n  Country = \"SVK\""
    },
    {
        "question_id": 1529,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT SUM(T1.Price ) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'",
        "Generated SQL": "SELECT SUM(Amount) FROM transactions_1k WHERE CustomerID = 38508 AND Date BETWEEN '2012-01-01' AND '2012-01-31'"
    },
    {
        "question_id": 1531,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
        "Generated SQL": null
    },
    {
        "question_id": 1533,
        "db_id": "debit_card_specializing",
        "Original SQL": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
        "Generated SQL": "SELECT Consumption\nFROM yearmonth\nWHERE CustomerID IN (\n  SELECT CustomerID\n  FROM transactions_1k\n  WHERE ProductID = 5\n  GROUP BY CustomerID\n  HAVING SUM(Price) > 29.00\n)\nAND Date BETWEEN '2012-08-01' AND '2012-08-31'"
    },
    {
        "question_id": 1312,
        "db_id": "student_club",
        "Original SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
        "Generated SQL": "SELECT major_name FROM major WHERE major_id ='major_id'"
    },
    {
        "question_id": 1317,
        "db_id": "student_club",
        "Original SQL": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
        "Generated SQL": "SELECT COUNT(*)\nFROM member\nWHERE member_id IN (\n  SELECT link_to_member\n  FROM attendance\n  WHERE link_to_event = \"Women's Soccer\"\n)\nAND t_shirt_size = \"medium\""
    },
    {
        "question_id": 1322,
        "db_id": "student_club",
        "Original SQL": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
        "Generated SQL": "SELECT COUNT(*) FROM event\nINNER JOIN attendance ON event.event_id = attendance.link_to_event\nINNER JOIN member ON member.member_id = attendance.link_to_member\nWHERE event.type ='meeting'\nGROUP BY event.event_id\nHAVING COUNT(*) > 10"
    },
    {
        "question_id": 1323,
        "db_id": "student_club",
        "Original SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'",
        "Generated SQL": null
    },
    {
        "question_id": 1331,
        "db_id": "student_club",
        "Original SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "Generated SQL": "SELECT SUM(amount)\nFROM income\nWHERE position = 'Vice President'"
    },
    {
        "question_id": 1334,
        "db_id": "student_club",
        "Original SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
        "Generated SQL": "SELECT first_name, last_name\nFROM member\nWHERE zip IN (SELECT zip_code FROM zip_code WHERE state = 'IL')"
    },
    {
        "question_id": 1338,
        "db_id": "student_club",
        "Original SQL": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
        "Generated SQL": "SELECT * FROM expense WHERE approved = 'yes' AND expense_date = '2019-10-08'"
    },
    {
        "question_id": 1339,
        "db_id": "student_club",
        "Original SQL": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
        "Generated SQL": "SELECT SUM(cost) / COUNT(*)\nFROM expense\nWHERE link_to_member = 'Elijah Allen'\nAND (expense_date LIKE '2021-09%' OR expense_date LIKE '2021-10%')"
    },
    {
        "question_id": 1340,
        "db_id": "student_club",
        "Original SQL": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
        "Generated SQL": "SELECT SUM(budget.amount) AS total_spent\nFROM budget\nWHERE budget.event_status = 'active'\nAND budget.category = 'event'\nAND budget.link_to_event IN (\n  SELECT event.event_id\n  FROM event\n  WHERE event.event_date BETWEEN '2019-01-01' AND '2020-01-01'\n)"
    },
    {
        "question_id": 1344,
        "db_id": "student_club",
        "Original SQL": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
        "Generated SQL": "SELECT notes\nFROM event\nWHERE event_date = '2019/9/14'"
    },
    {
        "question_id": 1346,
        "db_id": "student_club",
        "Original SQL": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
        "Generated SQL": "SELECT phone FROM member WHERE last_name = \"Jacobs\""
    },
    {
        "question_id": 1350,
        "db_id": "student_club",
        "Original SQL": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
        "Generated SQL": "SELECT status\nFROM event\nWHERE event_name = \"Post Cards, Posters\" AND event_date = \"2019/8/20\""
    },
    {
        "question_id": 1351,
        "db_id": "student_club",
        "Original SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
        "Generated SQL": "SELECT major_name FROM major WHERE major_id ='major_id'"
    },
    {
        "question_id": 1352,
        "db_id": "student_club",
        "Original SQL": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
        "Generated SQL": "SELECT COUNT(*) FROM member\nWHERE link_to_major = \"Business\"\nAND t_shirt_size = \"Medium\""
    },
    {
        "question_id": 1356,
        "db_id": "student_club",
        "Original SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "Generated SQL": "SELECT department FROM major WHERE major_name = 'President of the club'"
    },
    {
        "question_id": 1357,
        "db_id": "student_club",
        "Original SQL": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
        "Generated SQL": "SELECT date_received FROM income WHERE source = 'dues' AND first_name = 'Connor' AND last_name = 'Hilton'"
    },
    {
        "question_id": 1359,
        "db_id": "student_club",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
        "Generated SQL": "SELECT COUNT(*)\nFROM budget\nWHERE budget.category = 'Advertisement'\nAND budget.event_status = 'Yearly Kickoff'\nAND budget.remaining > (SELECT budget.remaining\n                        FROM budget\n                        WHERE budget.category = 'October Meeting')"
    },
    {
        "question_id": 1361,
        "db_id": "student_club",
        "Original SQL": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
        "Generated SQL": "SELECT SUM(cost)\nFROM expense\nWHERE expense_description = 'Pizza'"
    },
    {
        "question_id": 1362,
        "db_id": "student_club",
        "Original SQL": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
        "Generated SQL": "SELECT COUNT(DISTINCT city)\nFROM zip_code\nWHERE state = 'Virginia' AND short_state = 'VA' AND county = 'Orange'"
    },
    {
        "question_id": 1368,
        "db_id": "student_club",
        "Original SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'",
        "Generated SQL": "SELECT major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.phone = \"809-555-3360\""
    },
    {
        "question_id": 1371,
        "db_id": "student_club",
        "Original SQL": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
        "Generated SQL": "SELECT COUNT(*) FROM attendance\nWHERE link_to_event = \"Women's Soccer\""
    },
    {
        "question_id": 1375,
        "db_id": "student_club",
        "Original SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
        "Generated SQL": "SELECT * FROM member WHERE link_to_major = \"major_id\""
    },
    {
        "question_id": 1376,
        "db_id": "student_club",
        "Original SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
        "Generated SQL": "SELECT event_name, spent, budget_amount, spent/budget_amount FROM event\nINNER JOIN budget ON event.event_id = budget.link_to_event\nWHERE event.status = 'closed'\nORDER BY spent/budget_amount DESC\nLIMIT 1"
    },
    {
        "question_id": 1378,
        "db_id": "student_club",
        "Original SQL": "SELECT MAX(spent) FROM budget",
        "Generated SQL": "SELECT MAX(spent) FROM budget"
    },
    {
        "question_id": 1380,
        "db_id": "student_club",
        "Original SQL": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
        "Generated SQL": "SELECT SUM(cost)\nFROM expense\nWHERE expense_description = 'Food'"
    },
    {
        "question_id": 1381,
        "db_id": "student_club",
        "Original SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7",
        "Generated SQL": "SELECT first_name, last_name\nFROM member\nWHERE member_id IN (\n  SELECT link_to_member\n  FROM attendance\n  GROUP BY link_to_member\n  HAVING COUNT(link_to_member) > 7\n)"
    },
    {
        "question_id": 1387,
        "db_id": "student_club",
        "Original SQL": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
        "Generated SQL": "SELECT * FROM member WHERE position = 'Budget Manager'"
    },
    {
        "question_id": 1389,
        "db_id": "student_club",
        "Original SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
        "Generated SQL": "SELECT event_name, cost\nFROM event\nORDER BY cost ASC\nLIMIT 1"
    },
    {
        "question_id": 1390,
        "db_id": "student_club",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
        "Generated SQL": "SELECT SUM(cost) / SUM(cost) AS Percentage\nFROM event\nWHERE type = 'Yearly Kickoff'"
    },
    {
        "question_id": 1392,
        "db_id": "student_club",
        "Original SQL": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1",
        "Generated SQL": "SELECT source, SUM(amount)\nFROM income\nWHERE date_received LIKE '2019-09%'\nGROUP BY source\nORDER BY SUM(amount) DESC\nLIMIT 1"
    },
    {
        "question_id": 1394,
        "db_id": "student_club",
        "Original SQL": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'",
        "Generated SQL": "SELECT COUNT(*) FROM member\nWHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Physics Teaching')"
    },
    {
        "question_id": 1398,
        "db_id": "student_club",
        "Original SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
        "Generated SQL": "SELECT event_name, SUM(cost)\nFROM event\nJOIN expense ON event.event_id = expense.link_to_event\nWHERE type = 'advertisement'\nGROUP BY event_name\nORDER BY SUM(cost) DESC\nLIMIT 1"
    },
    {
        "question_id": 1399,
        "db_id": "student_club",
        "Original SQL": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
        "Generated SQL": "SELECT * FROM event WHERE event_name = 'Women's Soccer'"
    },
    {
        "question_id": 1401,
        "db_id": "student_club",
        "Original SQL": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
        "Generated SQL": "SELECT SUM(cost)\nFROM expense\nWHERE link_to_event = 'September Speaker'"
    },
    {
        "question_id": 1403,
        "db_id": "student_club",
        "Original SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1",
        "Generated SQL": "SELECT event_name, cost, budget.amount\nFROM event\nJOIN budget ON event.event_id = budget.link_to_event\nWHERE event.status = 'closed'\nORDER BY cost DESC\nLIMIT 1"
    },
    {
        "question_id": 1404,
        "db_id": "student_club",
        "Original SQL": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
        "Generated SQL": "SELECT SUM(cost) AS total_approved_expenses\nFROM expense\nWHERE link_to_budget = 'October Meeting'\nAND approved = 'Yes'"
    },
    {
        "question_id": 1405,
        "db_id": "student_club",
        "Original SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
        "Generated SQL": "SELECT SUM(amount)\nFROM budget\nWHERE event_status = 'active'\nAND event_name = 'April Speaker';\n\nSELECT category, SUM(amount)\nFROM budget\nWHERE event_status = 'active'\nAND event_name = 'April Speaker'\nGROUP BY category\nORDER BY SUM(amount) ASC"
    },
    {
        "question_id": 1409,
        "db_id": "student_club",
        "Original SQL": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
        "Generated SQL": "SELECT SUM(cost)\nFROM expense\nWHERE expense_date = '8/20/2019'"
    },
    {
        "question_id": 1410,
        "db_id": "student_club",
        "Original SQL": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'",
        "Generated SQL": "SELECT first_name ||'' || last_name, SUM(cost)\nFROM expense\nJOIN member ON member.member_id = expense.link_to_member\nWHERE member.member_id ='rec4BLdZHS2Blfp4v'\nGROUP BY first_name, last_name"
    },
    {
        "question_id": 1411,
        "db_id": "student_club",
        "Original SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
        "Generated SQL": "SELECT * FROM expense WHERE link_to_member = 'Sacha Harrison'"
    },
    {
        "question_id": 1422,
        "db_id": "student_club",
        "Original SQL": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
        "Generated SQL": "SELECT category FROM budget WHERE link_to_event = 'MU 215'"
    },
    {
        "question_id": 1426,
        "db_id": "student_club",
        "Original SQL": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
        "Generated SQL": "SELECT last_name, department, college\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.department = 'Environmental Engineering'"
    },
    {
        "question_id": 1427,
        "db_id": "student_club",
        "Original SQL": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
        "Generated SQL": "SELECT budget.category\nFROM budget\nJOIN event ON budget.link_to_event = event.event_id\nWHERE event.location = 'MU 215' AND budget.spent = 0 AND event.type = 'guest speaker'"
    },
    {
        "question_id": 1432,
        "db_id": "student_club",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'",
        "Generated SQL": "SELECT (\n  SELECT SUM(amount)\n  FROM income\n  WHERE link_to_member IN (\n    SELECT member_id\n    FROM member\n    WHERE t_shirt_size ='medium'\n  )\n) / (\n  SELECT SUM(amount)\n  FROM income\n)"
    },
    {
        "question_id": 1435,
        "db_id": "student_club",
        "Original SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
        "Generated SQL": "SELECT event_name FROM event\nWHERE type = \"game\" AND status = \"closed\" AND event_date BETWEEN \"3/15/2019\" AND \"3/20/2020\""
    },
    {
        "question_id": 1457,
        "db_id": "student_club",
        "Original SQL": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )",
        "Generated SQL": "SELECT first_name, last_name, phone\nFROM member\nWHERE member_id IN (\n  SELECT link_to_member\n  FROM expense\n  WHERE cost > (\n    SELECT AVG(cost)\n    FROM expense\n  )\n)"
    },
    {
        "question_id": 1460,
        "db_id": "student_club",
        "Original SQL": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
        "Generated SQL": "SELECT first_name, last_name, cost\nFROM member\nINNER JOIN expense ON member.member_id = expense.link_to_member\nWHERE category = 'Water, veggie tray and supplies'"
    },
    {
        "question_id": 1464,
        "db_id": "student_club",
        "Original SQL": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
        "Generated SQL": "SELECT first_name, last_name, amount\nFROM member\nJOIN income ON member.member_id = income.link_to_member\nWHERE income.date_received = '2019-09-09'"
    },
    {
        "question_id": 1149,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'",
        "Generated SQL": "SELECT\n  COUNT(*) AS Total,\n  COUNT(CASE WHEN SEX = 'M' THEN 1 ELSE NULL END) AS Male,\n  COUNT(CASE WHEN SEX = 'F' THEN 1 ELSE NULL END) AS Female,\n  COUNT(CASE WHEN SEX = 'M' THEN 1 ELSE NULL END) / COUNT(*) AS Deviation\nFROM Patient"
    },
    {
        "question_id": 1150,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'",
        "Generated SQL": "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Birthday > '1930-01-01';\nSELECT COUNT(*) FROM Patient WHERE SEX = 'F';\nSELECT COUNT(*) FROM Patient WHERE Birthday > '1930-01-01';\nSELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Birthday > '1930-01-01' / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')"
    },
    {
        "question_id": 1152,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'",
        "Generated SQL": "SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = 'outpatient'\n/\nSELECT COUNT(*) FROM Patient WHERE Diagnosis = 'SLE' AND Admission = 'inpatient'"
    },
    {
        "question_id": 1153,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609",
        "Generated SQL": "SELECT DISTINCT Diagnosis FROM Examination WHERE ID = '30609'"
    },
    {
        "question_id": 1155,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
        "Generated SQL": "SELECT ID, SEX, Birthday\nFROM Patient\nWHERE LDH > (SELECT MAX(LDH) FROM Laboratory)"
    },
    {
        "question_id": 1156,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
        "Generated SQL": "SELECT ID, SEX, Birthday FROM Patient WHERE Diagnosis = 'positive degree of coagulation'"
    },
    {
        "question_id": 1157,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
        "Generated SQL": "SELECT ID, SEX, DIAGNOSIS\nFROM Patient\nWHERE Thrombosis ='severe'"
    },
    {
        "question_id": 1162,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'",
        "Generated SQL": "SELECT COUNT(*) FROM Patient\nWHERE SEX = 'F' AND Description = '1997-01-01' AND FirstDate = '1997-01-01'"
    },
    {
        "question_id": 1164,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT  COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', T2.`Examination Date`) = '1997' AND T2.Thrombosis = 1",
        "Generated SQL": "SELECT COUNT(*) FROM Patient\nWHERE ID IN (\n  SELECT ID FROM Examination\n  WHERE Thrombosis = 1\n  AND Examination.Date = '1997-01-01'\n)\nAND SEX = 'F'"
    },
    {
        "question_id": 1166,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1",
        "Generated SQL": "SELECT Patient.Description, Patient.Diagnosis\nFROM Patient\nINNER JOIN Examination\nON Patient.ID = Examination.ID\nORDER BY Patient.Birthday ASC\nLIMIT 1"
    },
    {
        "question_id": 1168,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
        "Generated SQL": "SELECT Patient.Birthday, Patient.Description\nFROM Patient\nINNER JOIN Laboratory ON Patient.ID = Laboratory.ID\nORDER BY Patient.Birthday DESC\nLIMIT 1"
    },
    {
        "question_id": 1169,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
        "Generated SQL": "SELECT COUNT(SEX) FROM Patient WHERE SEX = 'M' / COUNT(SEX) FROM Patient WHERE SEX = 'F'"
    },
    {
        "question_id": 1171,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18",
        "Generated SQL": "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Birthday < '1990-01-01'"
    },
    {
        "question_id": 1175,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
        "Generated SQL": "SELECT Patient.Birthday, Doctor.Diagnosis\nFROM Patient\nINNER JOIN Examination ON Patient.ID = Examination.ID\nINNER JOIN Doctor ON Patient.ID = Doctor.ID\nWHERE Examination.Thrombosis = 1\nORDER BY Examination.HGB DESC\nLIMIT 1"
    },
    {
        "question_id": 1179,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'",
        "Generated SQL": "SELECT * FROM Examination\nWHERE Diagnosis = 'SLE' AND Date = '1994-02-19'"
    },
    {
        "question_id": 1185,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'",
        "Generated SQL": null
    },
    {
        "question_id": 1187,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4",
        "Generated SQL": "SELECT ID\nFROM Patient\nWHERE ID IN (\n  SELECT ID\n  FROM Examination\n  WHERE Date BETWEEN '1987/7/6' AND '1996/1/31'\n  AND GPT > 30\n  AND ALB < 4\n)"
    },
    {
        "question_id": 1189,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
        "Generated SQL": "SELECT COUNT(*) FROM Patient\nWHERE Thrombosis = 2 AND ANA = 'S' AND IgG > (SELECT AVG(IgG) FROM Laboratory)"
    },
    {
        "question_id": 1192,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%'",
        "Generated SQL": null
    },
    {
        "question_id": 1195,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'",
        "Generated SQL": "SELECT AVG(ALB) FROM Laboratory\nWHERE SEX = 'F' AND PLT > 400 AND Diagnosis = 'SLE'"
    },
    {
        "question_id": 1198,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
        "Generated SQL": "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'"
    },
    {
        "question_id": 1201,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'",
        "Generated SQL": "SELECT COUNT(*) FROM Patient\nWHERE SEX = 'F' AND Birthday BETWEEN '1980-01-01' AND '1980-12-31' AND Diagnosis = 'RA'"
    },
    {
        "question_id": 1205,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
        "Generated SQL": "SELECT * FROM Laboratory WHERE ID = 57266 AND UA BETWEEN 0 AND 10"
    },
    {
        "question_id": 1208,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60",
        "Generated SQL": "SELECT ID FROM Patient WHERE SEX = 'M' AND GPT > (SELECT GPT FROM Laboratory WHERE Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = Patient.ID))"
    },
    {
        "question_id": 1209,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC",
        "Generated SQL": "SELECT Patient.ID, Patient.Birthday, Patient.Description, Patient.First Date, Patient.Admission, Patient.Diagnosis, Laboratory.Date, Laboratory.ALT, Laboratory.AST, Laboratory.ALT/AST\nFROM Patient\nINNER JOIN Laboratory\nON Patient.ID = Laboratory.ID\nWHERE Laboratory.ALT/AST > 1.5\nORDER BY Patient.Birthday ASC"
    },
    {
        "question_id": 1220,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29",
        "Generated SQL": "SELECT ID, SEX, Birthday FROM Patient WHERE UN BETWEEN 0.5 AND 1.5"
    },
    {
        "question_id": 1225,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID",
        "Generated SQL": "SELECT SEX, SUM(T-BIL)\nFROM Patient\nGROUP BY SEX\nHAVING SUM(T-BIL) NOT BETWEEN 0 AND 1.5"
    },
    {
        "question_id": 1227,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
        "Generated SQL": "SELECT AVG(Patient.Birthday)\nFROM Patient\nWHERE Patient.SEX = 'M' AND Patient.Description LIKE '%Cholesterol%'"
    },
    {
        "question_id": 1229,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50",
        "Generated SQL": "SELECT COUNT(*) FROM Patient\nWHERE TG > (SELECT AVG(TG) FROM Laboratory)\nAND (SELECT DATEDIFF(YEAR, Birthday, CURDATE()) FROM Patient) > 50"
    },
    {
        "question_id": 1231,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250",
        "Generated SQL": "SELECT COUNT(*) FROM Patient\nWHERE SEX = 'M' AND Birthday BETWEEN '1936-01-01' AND '1956-01-01'\nAND C3 > 0"
    },
    {
        "question_id": 1232,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250",
        "Generated SQL": "SELECT ID, SEX, DATE_DIFF(Birthday, Date, YEAR) AS Age\nFROM Patient\nWHERE GLU NOT BETWEEN 5 AND 40 AND T-CHO BETWEEN 100 AND 200"
    },
    {
        "question_id": 1235,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
        "Generated SQL": "SELECT Patient.ID, Patient.Birthday, Patient.Description, Patient.Admission, Patient.Diagnosis\nFROM Patient\nINNER JOIN Laboratory ON Laboratory.ID = Patient.ID\nWHERE Laboratory.WBC < Laboratory.RBC"
    },
    {
        "question_id": 1238,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1",
        "Generated SQL": "SELECT ID, SEX\nFROM Patient\nWHERE ID IN (\n  SELECT ID\n  FROM Examination\n  WHERE Diagnosis = 'SLE'\n  AND HGB > 12\n  ORDER BY ID\n  LIMIT 1\n)"
    },
    {
        "question_id": 1239,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )",
        "Generated SQL": "SELECT ID, Age\nFROM Patient\nWHERE ID IN (\n  SELECT ID\n  FROM Laboratory\n  GROUP BY ID\n  HAVING MAX(HCT) > 0.35\n)"
    },
    {
        "question_id": 1241,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
        "Generated SQL": "SELECT COUNT(*) FROM Patient\nWHERE Platelet < (SELECT AVG(Platelet) FROM Laboratory)"
    },
    {
        "question_id": 1242,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'",
        "Generated SQL": null
    },
    {
        "question_id": 1243,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN T2.PT >= 14 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55",
        "Generated SQL": "SELECT (COUNT(SEX) / COUNT(DISTINCT SEX)) * 100 AS Percentage\nFROM Patient\nWHERE (Birthday > DATE('now', '-55 years'))\nAND SEX = 'FEMALE'"
    },
    {
        "question_id": 1247,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'",
        "Generated SQL": "SELECT COUNT(*) FROM Patient\nWHERE SEX = 'M' AND WBC IS NOT NULL AND WBC > 0 AND FG IS NOT NULL AND FG < 0.5"
    },
    {
        "question_id": 1251,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000",
        "Generated SQL": "SELECT COUNT(*) FROM Patient WHERE IgG > 0"
    },
    {
        "question_id": 1252,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL",
        "Generated SQL": "SELECT COUNT(*) FROM Patient\nWHERE ID IN (\n  SELECT ID FROM Laboratory\n  WHERE IGG = 'Normal'\n)\nAND Symptoms IS NOT NULL"
    },
    {
        "question_id": 1254,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'",
        "Generated SQL": "SELECT COUNT(*) FROM Patient\nWHERE SEX = 'M' AND Birthday > '1990-1-1' AND IgA = 'Normal'"
    },
    {
        "question_id": 1255,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1",
        "Generated SQL": "SELECT Diagnosis\nFROM Examination\nWHERE aCL IgM > 0\nGROUP BY Diagnosis\nORDER BY COUNT(*) DESC\nLIMIT 1"
    },
    {
        "question_id": 1256,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL",
        "Generated SQL": null
    },
    {
        "question_id": 1257,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70",
        "Generated SQL": "SELECT COUNT(*) FROM Patient\nWHERE ID IN (\n  SELECT ID FROM Laboratory\n  WHERE CRE > 1.5\n) AND BIRTHDAY > '1970-01-01'"
    },
    {
        "question_id": 1265,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'",
        "Generated SQL": "SELECT COUNT(*) FROM Patient\nWHERE ID IN (SELECT ID FROM Laboratory\nWHERE U-PRO = 'Normal' AND Admission = 'Yes')"
    },
    {
        "question_id": 1267,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0",
        "Generated SQL": "SELECT COUNT(*) FROM Patient\nWHERE SEX = 'M' AND Diagnosis = 'Normal' AND Thrombosis = 0"
    },
    {
        "question_id": 1270,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL",
        "Generated SQL": "SELECT * FROM Patient\nWHERE SEX = 'F' AND Diagnosis NOT LIKE '%Symptoms%'"
    },
    {
        "question_id": 1275,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'",
        "Generated SQL": "SELECT COUNT(*) FROM Patient\nWHERE SEX = 'M' AND C3 = 'Normal' AND SSB = 'Normal'"
    },
    {
        "question_id": 1281,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1",
        "Generated SQL": "SELECT Patient.Birthday\nFROM Patient\nINNER JOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.GLU > 100\nORDER BY Patient.Birthday ASC\nLIMIT 1"
    },
    {
        "question_id": 1302,
        "db_id": "thrombosis_prediction",
        "Original SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
        "Generated SQL": "SELECT COUNT(*) FROM Examination\nWHERE Diagnosis = 'Normal' AND Thrombosis = 1"
    },
    {
        "question_id": 1025,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1",
        "Generated SQL": "SELECT name FROM League\nWHERE id = (\n    SELECT league_id FROM Match\n    WHERE season = '2016'\n    GROUP BY league_id\n    ORDER BY SUM(home_team_goal) + SUM(away_team_goal) DESC\n    LIMIT 1\n)"
    },
    {
        "question_id": 1028,
        "db_id": "european_football_2",
        "Original SQL": "SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1",
        "Generated SQL": "SELECT team_short_name\nFROM Team\nWHERE team_api_id IN (\n    SELECT away_team_api_id\n    FROM Match\n    WHERE league_id = (\n        SELECT id\n        FROM League\n        WHERE name = 'Scottish Premier League'\n    ) AND season = '2010/2011'\n    GROUP BY away_team_api_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)"
    },
    {
        "question_id": 1029,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4",
        "Generated SQL": "SELECT team_long_name, buildUpPlaySpeed\nFROM Team_Attributes\nWHERE buildUpPlaySpeed IN (\n    SELECT buildUpPlaySpeed\n    FROM Team_Attributes\n    ORDER BY buildUpPlaySpeed DESC\n    LIMIT 4\n)"
    },
    {
        "question_id": 1030,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
        "Generated SQL": "SELECT name FROM League WHERE id = (SELECT league_id FROM Match WHERE season = '2016' AND home_team_goal = away_team_goal GROUP BY league_id ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
        "question_id": 1031,
        "db_id": "european_football_2",
        "Original SQL": "SELECT DISTINCT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.`date`) >= '2013' AND STRFTIME('%Y',t1.`date`) <= '2015' AND t1.sprint_speed >= 97",
        "Generated SQL": "SELECT player_name, age\nFROM Player\nWHERE sprint_speed >= 97\nAND (\n    SELECT date\n    FROM Match\n    WHERE player_api_id = Player.player_api_id\n    ORDER BY date DESC\n    LIMIT 1\n) BETWEEN '2013-01-01' AND '2015-12-31'"
    },
    {
        "question_id": 1032,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id",
        "Generated SQL": "SELECT name, COUNT(*)\nFROM League\nGROUP BY name\nORDER BY COUNT(*) DESC\nLIMIT 1"
    },
    {
        "question_id": 1035,
        "db_id": "european_football_2",
        "Original SQL": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
        "Generated SQL": "SELECT team_fifa_api_id\nFROM Team_Attributes\nWHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60"
    },
    {
        "question_id": 1036,
        "db_id": "european_football_2",
        "Original SQL": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.`date`) = '2012')",
        "Generated SQL": "SELECT team_long_name\nFROM Team_Attributes\nWHERE buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes)\nAND date = '2012-12-31'"
    },
    {
        "question_id": 1037,
        "db_id": "european_football_2",
        "Original SQL": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
        "Generated SQL": "SELECT COUNT(*) FROM Player_Attributes\nWHERE preferred_foot = 'Left' AND birthday BETWEEN '1987-01-01' AND '1992-12-31'"
    },
    {
        "question_id": 1039,
        "db_id": "european_football_2",
        "Original SQL": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
        "Generated SQL": "SELECT AVG(long_shots) FROM Player WHERE player_name = 'Ahmed Samir Farag'"
    },
    {
        "question_id": 1040,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC LIMIT 10",
        "Generated SQL": "SELECT player_name\nFROM Player\nWHERE height > 180\nORDER BY AVG(heading_accuracy) DESC\nLIMIT 10"
    },
    {
        "question_id": 1042,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0",
        "Generated SQL": "SELECT name FROM League\nWHERE average_home_goals > average_away_goals\nAND season = '2009/2010'"
    },
    {
        "question_id": 1044,
        "db_id": "european_football_2",
        "Original SQL": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
        "Generated SQL": "SELECT * FROM Player WHERE birthday LIKE '1970-10%'"
    },
    {
        "question_id": 1048,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
        "Generated SQL": "SELECT overall_rating FROM Player_Attributes WHERE player_api_id = 1 AND date = '2011-01-01'"
    },
    {
        "question_id": 1057,
        "db_id": "european_football_2",
        "Original SQL": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'",
        "Generated SQL": "SELECT AVG(home_team_goal)\nFROM Match\nWHERE country_id = (SELECT id FROM Country WHERE name = 'Poland')\nAND season = '2010/2011'"
    },
    {
        "question_id": 1058,
        "db_id": "european_football_2",
        "Original SQL": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",
        "Generated SQL": "SELECT Player.player_name, AVG(Match.home_player_X1)\nFROM Player\nJOIN Match ON Player.player_api_id = Match.home_player_1\nGROUP BY Player.player_api_id\nORDER BY AVG(Match.home_player_X1) DESC\nLIMIT 1"
    },
    {
        "question_id": 1068,
        "db_id": "european_football_2",
        "Original SQL": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'",
        "Generated SQL": "SELECT AVG(overall_rating)\nFROM Player_Attributes\nWHERE player_api_id IN (SELECT player_api_id\n                        FROM Player\n                        WHERE height > 170)\nAND date BETWEEN '2010-01-01' AND '2015-12-31'"
    },
    {
        "question_id": 1076,
        "db_id": "european_football_2",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "Generated SQL": "SELECT AVG(ball_control) FROM Player_Attributes\nWHERE player_api_id IN (\n    SELECT player_api_id FROM Player\n    WHERE player_name IN ('<NAME>', '<NAME>')\n)"
    },
    {
        "question_id": 1078,
        "db_id": "european_football_2",
        "Original SQL": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
        "Generated SQL": "SELECT player_name FROM Player WHERE player_fifa_api_id =?"
    },
    {
        "question_id": 1079,
        "db_id": "european_football_2",
        "Original SQL": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "Generated SQL": "SELECT player_name, height\nFROM Player\nORDER BY height DESC\nLIMIT 1"
    },
    {
        "question_id": 1080,
        "db_id": "european_football_2",
        "Original SQL": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
        "Generated SQL": "SELECT COUNT(*) FROM Player_Attributes\nWHERE preferred_foot = 'left' AND attacking_work_rate LIKE '%att%'"
    },
    {
        "question_id": 1084,
        "db_id": "european_football_2",
        "Original SQL": "SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.birthday) < '1986' AND t2.defensive_work_rate = 'high'",
        "Generated SQL": null
    },
    {
        "question_id": 1088,
        "db_id": "european_football_2",
        "Original SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70",
        "Generated SQL": null
    },
    {
        "question_id": 1091,
        "db_id": "european_football_2",
        "Original SQL": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 7) = '2009-04'",
        "Generated SQL": "SELECT COUNT(*) FROM Match\nWHERE country_id = (SELECT id FROM Country WHERE name = 'Belgium')\nAND league_id = (SELECT id FROM League WHERE name = 'Jupiler League')\nAND season = '2009/10'\nAND stage = 'Group Stage'\nAND date LIKE '2009-04%'"
    },
    {
        "question_id": 1092,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))",
        "Generated SQL": "SELECT name FROM League WHERE id = (SELECT league_id FROM Match WHERE season = '2008/2009' GROUP BY league_id ORDER BY COUNT(*) DESC LIMIT 1)"
    },
    {
        "question_id": 1094,
        "db_id": "european_football_2",
        "Original SQL": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
        "Generated SQL": "SELECT (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = '<NAME>')) - (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = '<NAME>'))"
    },
    {
        "question_id": 1096,
        "db_id": "european_football_2",
        "Original SQL": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'",
        "Generated SQL": "SELECT AVG(overall_rating)\nFROM Player_Attributes\nWHERE player_api_id =?"
    },
    {
        "question_id": 1098,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "Generated SQL": "SELECT * FROM Team_Attributes\nWHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_short_name = 'Ajax')\nAND chanceCreationPassing > 0\nORDER BY chanceCreationPassing DESC\nLIMIT 1"
    },
    {
        "question_id": 1102,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1",
        "Generated SQL": "SELECT Player.player_name\nFROM Player\nWHERE Player.player_fifa_api_id IN (\n    SELECT Player_Attributes.player_fifa_api_id\n    FROM Player_Attributes\n    WHERE Player_Attributes.overall_rating = 77\n    AND Player_Attributes.date = '2016-06-23'\n)\nORDER BY Player.player_fifa_api_id ASC\nLIMIT 1"
    },
    {
        "question_id": 1103,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
        "Generated SQL": "SELECT Player_Attributes.overall_rating\nFROM Player_Attributes\nINNER JOIN Player\nON Player_Attributes.player_api_id = Player.player_api_id\nWHERE Player.player_name = 'Aaron Mooy' AND Player_Attributes.date = '2016/2/4'"
    },
    {
        "question_id": 1105,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.`date` LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'",
        "Generated SQL": "SELECT buildUpPlaySpeed, buildUpPlayDribbling, buildUpPlayPassing, buildUpPlayPositioningClass\nFROM Team_Attributes\nWHERE team_api_id =?\nAND date =?"
    },
    {
        "question_id": 1107,
        "db_id": "european_football_2",
        "Original SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "Generated SQL": "SELECT date\nFROM Match\nWHERE home_player_11 = (SELECT player_api_id\n                        FROM Player\n                        WHERE player_name = '<NAME>')\nORDER BY date DESC\nLIMIT 1"
    },
    {
        "question_id": 1110,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.`date` LIKE '2010-02-22%'",
        "Generated SQL": "SELECT buildUpPlayPassingClass\nFROM Team_Attributes\nWHERE team_long_name = \"FC Lorient\" AND date = \"2010/2/22\""
    },
    {
        "question_id": 1113,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t2.defenceAggressionClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.`date` LIKE '2015-09-10%'",
        "Generated SQL": "SELECT team_short_name, defenceAggressionClass\nFROM Team\nWHERE team_short_name = \"Hannover 96\"\nAND date = \"2015-09-10\""
    },
    {
        "question_id": 1114,
        "db_id": "european_football_2",
        "Original SQL": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
        "Generated SQL": "SELECT AVG(overall_rating)\nFROM Player_Attributes\nWHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Marko Arnautovic')\nAND date BETWEEN '2007-2-22' AND '2016-4-21'"
    },
    {
        "question_id": 1115,
        "db_id": "european_football_2",
        "Original SQL": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'",
        "Generated SQL": "SELECT (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = '<NAME>') ) / (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = '<NAME>')) FROM Match WHERE date = '2013/7/12'"
    },
    {
        "question_id": 1116,
        "db_id": "european_football_2",
        "Original SQL": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1",
        "Generated SQL": "SELECT player_name FROM Player\nWHERE height = (SELECT MAX(height) FROM Player)"
    },
    {
        "question_id": 1122,
        "db_id": "european_football_2",
        "Original SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
        "Generated SQL": "SELECT player_name FROM Player_Attributes\nORDER BY overall_rating DESC\nLIMIT 1"
    },
    {
        "question_id": 1124,
        "db_id": "european_football_2",
        "Original SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'",
        "Generated SQL": null
    },
    {
        "question_id": 1130,
        "db_id": "european_football_2",
        "Original SQL": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'",
        "Generated SQL": "SELECT team_short_name\nFROM Team_Attributes\nWHERE chanceCreationPassing = 'Safe'"
    },
    {
        "question_id": 1133,
        "db_id": "european_football_2",
        "Original SQL": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
        "Generated SQL": "SELECT COUNT(*) FROM Player WHERE player_name = \"Aaron\" AND birthday > \"1990-01-01\""
    },
    {
        "question_id": 1134,
        "db_id": "european_football_2",
        "Original SQL": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
        "Generated SQL": "SELECT Player_Attributes.jumping - Player_Attributes.jumping\nFROM Player_Attributes\nWHERE Player_Attributes.player_api_id = 6\nAND Player_Attributes.player_api_id = 23"
    },
    {
        "question_id": 1135,
        "db_id": "european_football_2",
        "Original SQL": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 4",
        "Generated SQL": "SELECT Player.player_api_id\nFROM Player\nJOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id\nWHERE Player_Attributes.potential = (SELECT MIN(potential) FROM Player_Attributes)\nAND Player_Attributes.preferred_foot = 'Right'\nORDER BY Player_Attributes.potential ASC\nLIMIT 4"
    },
    {
        "question_id": 1136,
        "db_id": "european_football_2",
        "Original SQL": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)",
        "Generated SQL": "SELECT COUNT(*)\nFROM Player_Attributes\nWHERE preferred_foot = 'left' AND crossing = (SELECT MAX(crossing) FROM Player_Attributes)"
    },
    {
        "question_id": 1139,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND t2.`date` LIKE '2008-09-24%'",
        "Generated SQL": "SELECT home_team_goal, away_team_goal\nFROM Match\nWHERE date = '2008-09-24'"
    },
    {
        "question_id": 1141,
        "db_id": "european_football_2",
        "Original SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
        "Generated SQL": "SELECT team_short_name, buildUpPlaySpeedClass\nFROM Team_Attributes\nINNER JOIN Team\nON Team_Attributes.team_api_id = Team.team_api_id\nWHERE team_short_name = 'KSV Cercle Brugge'"
    },
    {
        "question_id": 1144,
        "db_id": "european_football_2",
        "Original SQL": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1",
        "Generated SQL": "SELECT finishing, curve\nFROM Player_Attributes\nWHERE weight = (SELECT MAX(weight) FROM Player_Attributes)"
    },
    {
        "question_id": 1145,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 4",
        "Generated SQL": "SELECT name FROM League\nWHERE id IN (\n    SELECT league_id FROM Match\n    WHERE season = '2015-2016'\n    GROUP BY league_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 4\n)"
    },
    {
        "question_id": 1146,
        "db_id": "european_football_2",
        "Original SQL": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1",
        "Generated SQL": "SELECT team_long_name\nFROM Team\nWHERE team_api_id = (\n    SELECT away_team_api_id\n    FROM Match\n    WHERE away_team_goal = (\n        SELECT MAX(away_team_goal)\n        FROM Match\n    )\n)"
    },
    {
        "question_id": 1147,
        "db_id": "european_football_2",
        "Original SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)",
        "Generated SQL": "SELECT player_name FROM Player\nWHERE player_fifa_api_id = (SELECT MAX(overall_rating) FROM Player_Attributes)"
    },
    {
        "question_id": 1148,
        "db_id": "european_football_2",
        "Original SQL": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70  AND t1.height < 180 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ",
        "Generated SQL": "SELECT COUNT(*) FROM Player_Attributes\nWHERE height < 180 AND overall_rating > 70"
    },
    {
        "question_id": 846,
        "db_id": "formula_1",
        "Original SQL": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5",
        "Generated SQL": "SELECT DISTINCT driverRef\nFROM results\nWHERE raceId = 20\nAND position = 0"
    },
    {
        "question_id": 847,
        "db_id": "formula_1",
        "Original SQL": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 ORDER BY T1.q2 ASC LIMIT 1",
        "Generated SQL": "SELECT surname FROM drivers\nINNER JOIN results ON drivers.driverId = results.driverId\nINNER JOIN races ON results.raceId = races.raceId\nINNER JOIN qualifying ON races.raceId = qualifying.raceId\nWHERE races.raceId = 19\nAND qualifying.q1 = 'Q2'\nAND milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE raceId = 19)"
    },
    {
        "question_id": 850,
        "db_id": "formula_1",
        "Original SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
        "Generated SQL": "SELECT name FROM races\nINNER JOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.country = 'Germany'"
    },
    {
        "question_id": 854,
        "db_id": "formula_1",
        "Original SQL": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'",
        "Generated SQL": "SELECT lat, lng FROM circuits WHERE name = 'Australian Grand Prix'"
    },
    {
        "question_id": 857,
        "db_id": "formula_1",
        "Original SQL": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
        "Generated SQL": "SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix'"
    },
    {
        "question_id": 859,
        "db_id": "formula_1",
        "Original SQL": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
        "Generated SQL": "SELECT * FROM qualifying WHERE driverRef ='senb' AND raceId = 354"
    },
    {
        "question_id": 861,
        "db_id": "formula_1",
        "Original SQL": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
        "Generated SQL": "SELECT driverRef\nFROM drivers\nWHERE dob = '1987-01-01'"
    },
    {
        "question_id": 862,
        "db_id": "formula_1",
        "Original SQL": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "Generated SQL": "SELECT COUNT(DISTINCT driverId)\nFROM results\nWHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007)"
    },
    {
        "question_id": 865,
        "db_id": "formula_1",
        "Original SQL": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
        "Generated SQL": "SELECT surname, dob\nFROM drivers\nWHERE driverId IN (\n  SELECT driverId\n  FROM results\n  WHERE raceId = 592\n  GROUP BY driverId\n  HAVING MAX(position)\n)"
    },
    {
        "question_id": 866,
        "db_id": "formula_1",
        "Original SQL": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
        "Generated SQL": "SELECT drivers.url\nFROM drivers\nINNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId\nWHERE lapTimes.time = '00:01:27'"
    },
    {
        "question_id": 868,
        "db_id": "formula_1",
        "Original SQL": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
        "Generated SQL": "SELECT lat, lng FROM circuits WHERE name = 'Malaysian Grand Prix'"
    },
    {
        "question_id": 869,
        "db_id": "formula_1",
        "Original SQL": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1",
        "Generated SQL": "SELECT constructors.url\nFROM constructors\nINNER JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId\nWHERE constructorResults.points = (SELECT MAX(points) FROM constructorResults WHERE raceId = 9)"
    },
    {
        "question_id": 872,
        "db_id": "formula_1",
        "Original SQL": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
        "Generated SQL": "SELECT driverRef\nFROM drivers\nWHERE driverId IN (\n  SELECT driverId\n  FROM qualifying\n  WHERE raceId = 45\n  AND q3 = '00:01:33'\n)"
    },
    {
        "question_id": 875,
        "db_id": "formula_1",
        "Original SQL": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
        "Generated SQL": "SELECT * FROM seasons\nWHERE year =?"
    },
    {
        "question_id": 877,
        "db_id": "formula_1",
        "Original SQL": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
        "Generated SQL": "SELECT MIN(dob) FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE raceId = 872)"
    },
    {
        "question_id": 879,
        "db_id": "formula_1",
        "Original SQL": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
        "Generated SQL": "SELECT nationality FROM drivers WHERE driverId =?"
    },
    {
        "question_id": 880,
        "db_id": "formula_1",
        "Original SQL": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
        "Generated SQL": "SELECT\n  COUNT(*)\nFROM\n  lapTimes\nWHERE\n  driverId = (SELECT driverId FROM drivers WHERE surname = 'di Resta')\n  AND milliseconds < (SELECT milliseconds FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'di Resta') ORDER BY milliseconds LIMIT 1 OFFSET 1)"
    },
    {
        "question_id": 881,
        "db_id": "formula_1",
        "Original SQL": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'",
        "Generated SQL": null
    },
    {
        "question_id": 884,
        "db_id": "formula_1",
        "Original SQL": "SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )",
        "Generated SQL": "SELECT name FROM races WHERE date BETWEEN '1950-01-01' AND '1950-01-31'"
    },
    {
        "question_id": 892,
        "db_id": "formula_1",
        "Original SQL": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1",
        "Generated SQL": "SELECT drivers.forename, drivers.surname, SUM(results.points)\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nGROUP BY drivers.driverId\nORDER BY SUM(results.points) DESC\nLIMIT 1"
    },
    {
        "question_id": 894,
        "db_id": "formula_1",
        "Original SQL": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
        "Generated SQL": "SELECT drivers.forename, drivers.surname, races.name, lapTimes.time\nFROM drivers\nINNER JOIN lapTimes\nON drivers.driverId = lapTimes.driverId\nINNER JOIN results\nON drivers.driverId = results.driverId\nINNER JOIN races\nON results.raceId = races.raceId\nORDER BY lapTimes.time ASC\nLIMIT 1"
    },
    {
        "question_id": 895,
        "db_id": "formula_1",
        "Original SQL": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
        "Generated SQL": "SELECT AVG(milliseconds)\nFROM lapTimes\nWHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')"
    },
    {
        "question_id": 896,
        "db_id": "formula_1",
        "Original SQL": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
        "Generated SQL": null
    },
    {
        "question_id": 897,
        "db_id": "formula_1",
        "Original SQL": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1",
        "Generated SQL": "SELECT drivers.forename, drivers.surname, drivers.nationality, MAX(results.points)\nFROM drivers\nINNER JOIN results ON drivers.driverId = results.driverId\nGROUP BY drivers.driverId\nORDER BY MAX(results.points) DESC\nLIMIT 1"
    },
    {
        "question_id": 898,
        "db_id": "formula_1",
        "Original SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
        "Generated SQL": "SELECT\n  MIN(dob) AS youngest,\n  surname\nFROM\n  drivers\nWHERE\n  nationality = 'Japan'\nGROUP BY\n  surname\nORDER BY\n  youngest\nLIMIT 1"
    },
    {
        "question_id": 901,
        "db_id": "formula_1",
        "Original SQL": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'",
        "Generated SQL": "SELECT name, location FROM races WHERE date BETWEEN '2005-09-01' AND '2005-09-30'"
    },
    {
        "question_id": 902,
        "db_id": "formula_1",
        "Original SQL": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
        "Generated SQL": "SELECT * FROM races\nINNER JOIN results ON races.raceId = results.raceId\nINNER JOIN drivers ON results.driverId = drivers.driverId\nWHERE drivers.forename = 'Alex' AND drivers.surname = 'Yoong' AND results.number < 20"
    },
    {
        "question_id": 904,
        "db_id": "formula_1",
        "Original SQL": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1",
        "Generated SQL": "SELECT * FROM races\nINNER JOIN lapTimes\nON races.raceId = lapTimes.raceId\nWHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Schumacher')\nAND milliseconds = (SELECT MIN(milliseconds) FROM lapTimes WHERE raceId = races.raceId)"
    },
    {
        "question_id": 906,
        "db_id": "formula_1",
        "Original SQL": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "Generated SQL": "SELECT * FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix')"
    },
    {
        "question_id": 909,
        "db_id": "formula_1",
        "Original SQL": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'",
        "Generated SQL": "SELECT\n  COUNT(*) AS num_races,\n  COUNT(CASE WHEN country = 'Germany' THEN 1 END) / COUNT(*) AS percentage\nFROM races\nWHERE country LIKE '%Europe%'"
    },
    {
        "question_id": 910,
        "db_id": "formula_1",
        "Original SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
        "Generated SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'"
    },
    {
        "question_id": 912,
        "db_id": "formula_1",
        "Original SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "Generated SQL": "SELECT name FROM circuits WHERE circuitRef = 'MARINA_BAY_STREET_CIRCUIT'"
    },
    {
        "question_id": 915,
        "db_id": "formula_1",
        "Original SQL": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
        "Generated SQL": "SELECT DISTINCT country FROM drivers ORDER BY dob ASC"
    },
    {
        "question_id": 928,
        "db_id": "formula_1",
        "Original SQL": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007",
        "Generated SQL": "SELECT driverRef\nFROM drivers\nWHERE driverId IN (\n  SELECT driverId\n  FROM results\n  WHERE raceId IN (\n    SELECT raceId\n    FROM races\n    WHERE name = 'Canadian Grand Prix'\n    AND year = 2007\n  )\n  ORDER BY position ASC\n  LIMIT 1\n)"
    },
    {
        "question_id": 930,
        "db_id": "formula_1",
        "Original SQL": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
        "Generated SQL": "SELECT * FROM races\nWHERE raceId = (\n  SELECT raceId FROM results\n  WHERE driverId = (\n    SELECT driverId FROM drivers\n    WHERE forename = 'Lewis' AND surname = 'Hamilton'\n  )\n  ORDER BY points DESC\n  LIMIT 1\n)"
    },
    {
        "question_id": 931,
        "db_id": "formula_1",
        "Original SQL": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
        "Generated SQL": "SELECT fastestLapSpeed\nFROM results\nWHERE raceId = (SELECT raceId FROM races WHERE year = 2009 AND name = 'Spanish Grand Prix')\nORDER BY fastestLapSpeed ASC\nLIMIT 1"
    },
    {
        "question_id": 933,
        "db_id": "formula_1",
        "Original SQL": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008",
        "Generated SQL": "SELECT * FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE name = 'Chinese Grand Prix 2008')"
    },
    {
        "question_id": 937,
        "db_id": "formula_1",
        "Original SQL": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
        "Generated SQL": "SELECT time FROM results WHERE raceId = 1 AND position = 2"
    },
    {
        "question_id": 940,
        "db_id": "formula_1",
        "Original SQL": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )",
        "Generated SQL": "SELECT COUNT(DISTINCT driverId)\nFROM results\nWHERE raceId IN (\n  SELECT raceId\n  FROM races\n  WHERE year = 2008\n)\nAND driverId IN (\n  SELECT driverId\n  FROM drivers\n  WHERE dob >= '1980-01-01'\n)"
    },
    {
        "question_id": 944,
        "db_id": "formula_1",
        "Original SQL": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
        "Generated SQL": null
    },
    {
        "question_id": 945,
        "db_id": "formula_1",
        "Original SQL": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
        "Generated SQL": "SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Adelaide'"
    },
    {
        "question_id": 948,
        "db_id": "formula_1",
        "Original SQL": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
        "Generated SQL": "SELECT MAX(points) FROM constructorStandings\nWHERE nationality = 'British'"
    },
    {
        "question_id": 950,
        "db_id": "formula_1",
        "Original SQL": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291",
        "Generated SQL": "SELECT name FROM constructors WHERE constructorId IN (SELECT constructorId FROM constructorResults WHERE raceId = 291 AND points = 0)"
    },
    {
        "question_id": 951,
        "db_id": "formula_1",
        "Original SQL": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
        "Generated SQL": "SELECT COUNT(*)\nFROM constructors\nWHERE nationality = 'Japan'\nAND constructorId IN (\n  SELECT constructorId\n  FROM constructorStandings\n  WHERE points = 0\n  AND raceId IN (\n    SELECT raceId\n    FROM races\n    WHERE year = 2019\n    AND round = 1\n  )\n)"
    },
    {
        "question_id": 954,
        "db_id": "formula_1",
        "Original SQL": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
        "Generated SQL": "SELECT\n  year,\n  COUNT(*) AS total,\n  COUNT(CASE WHEN nationality = 'Japan' THEN 1 ELSE NULL END) AS japanese\nFROM\n  races\nWHERE\n  year BETWEEN 2007 AND 2009\nGROUP BY\n  year\nORDER BY\n  year"
    },
    {
        "question_id": 955,
        "db_id": "formula_1",
        "Original SQL": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
        "Generated SQL": "SELECT AVG(time) FROM results\nINNER JOIN constructors ON results.constructorId = constructors.constructorId\nINNER JOIN constructors ON results.constructorId = constructors.constructorId\nINNER JOIN races ON results.raceId = races.raceId\nWHERE constructors.name = 'Mercedes' AND races.year < 1975"
    },
    {
        "question_id": 959,
        "db_id": "formula_1",
        "Original SQL": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
        "Generated SQL": "SELECT fastestLap FROM results\nWHERE constructorId IN (\n  SELECT constructorId FROM constructorStandings\n  WHERE constructorStandingsId IN (\n    SELECT constructorStandingsId FROM constructorStandings\n    WHERE raceId IN (\n      SELECT raceId FROM races\n      WHERE year = 2009\n    )\n    ORDER BY points DESC\n    LIMIT 1\n  )\n)"
    },
    {
        "question_id": 960,
        "db_id": "formula_1",
        "Original SQL": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
        "Generated SQL": "SELECT AVG(fastestLapSpeed)\nFROM results\nWHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009)"
    },
    {
        "question_id": 962,
        "db_id": "formula_1",
        "Original SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
        "Generated SQL": "SELECT\n  COUNT(*) AS count,\n  COUNT(CASE WHEN lap > 50 THEN 1 END) AS over50,\n  COUNT(CASE WHEN birthYear < 1985 THEN 1 END) AS before1985\nFROM\n  lapTimes\nWHERE\n  year BETWEEN 2000 AND 2005"
    },
    {
        "question_id": 963,
        "db_id": "formula_1",
        "Original SQL": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
        "Generated SQL": "SELECT COUNT(*) FROM drivers\nWHERE nationality = 'France' AND\nlapTime < '02:00.00'"
    },
    {
        "question_id": 964,
        "db_id": "formula_1",
        "Original SQL": "SELECT code FROM drivers WHERE Nationality = 'American'",
        "Generated SQL": "SELECT * FROM drivers WHERE nationality = 'American'"
    },
    {
        "question_id": 967,
        "db_id": "formula_1",
        "Original SQL": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
        "Generated SQL": null
    },
    {
        "question_id": 971,
        "db_id": "formula_1",
        "Original SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
        "Generated SQL": "SELECT surname FROM drivers WHERE nationality = 'Germany' ORDER BY dob ASC LIMIT 1"
    },
    {
        "question_id": 972,
        "db_id": "formula_1",
        "Original SQL": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL",
        "Generated SQL": "SELECT drivers.driverId, drivers.code\nFROM drivers\nWHERE drivers.dob LIKE '1971-01-01%'\nORDER BY lapTimes.milliseconds ASC\nLIMIT 1"
    },
    {
        "question_id": 977,
        "db_id": "formula_1",
        "Original SQL": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
        "Generated SQL": "SELECT COUNT(*) FROM results\nWHERE raceId BETWEEN 50 AND 100\nAND statusId = 3"
    },
    {
        "question_id": 978,
        "db_id": "formula_1",
        "Original SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
        "Generated SQL": "SELECT location, lat, lng FROM circuits WHERE country = 'Austria'"
    },
    {
        "question_id": 981,
        "db_id": "formula_1",
        "Original SQL": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "Generated SQL": "SELECT MIN(dob) AS date, name, date, time\nFROM drivers\nJOIN races ON races.raceId = drivers.driverId\nJOIN qualifying ON qualifying.raceId = races.raceId\nGROUP BY races.raceId\nORDER BY date"
    },
    {
        "question_id": 988,
        "db_id": "formula_1",
        "Original SQL": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
        "Generated SQL": null
    },
    {
        "question_id": 989,
        "db_id": "formula_1",
        "Original SQL": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
        "Generated SQL": "SELECT * FROM results\nWHERE raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix' AND year = 2008)\nAND position = 1"
    },
    {
        "question_id": 990,
        "db_id": "formula_1",
        "Original SQL": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
        "Generated SQL": "SELECT constructors.constructorRef, constructors.url\nFROM constructors\nINNER JOIN constructorResults ON constructorResults.constructorId = constructors.constructorId\nINNER JOIN races ON constructorResults.raceId = races.raceId\nWHERE races.year = 2009 AND constructorResults.points = (SELECT MAX(constructorResults.points) FROM constructorResults INNER JOIN races ON constructorResults.raceId = races.raceId WHERE races.year = 2009)"
    },
    {
        "question_id": 717,
        "db_id": "superhero",
        "Original SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "Generated SQL": "SELECT power_name FROM superpower\nINNER JOIN hero_power ON superpower.id = hero_power.power_id\nINNER JOIN superhero ON hero_power.hero_id = superhero.id\nWHERE superhero.superhero_name = '3-D Man'"
    },
    {
        "question_id": 994,
        "db_id": "formula_1",
        "Original SQL": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
        "Generated SQL": null
    },
    {
        "question_id": 1001,
        "db_id": "formula_1",
        "Original SQL": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
        "Generated SQL": "SELECT surname, forename\nFROM drivers\nWHERE driverId IN (\n  SELECT driverId\n  FROM qualifying\n  WHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE year = 2008 AND round = 3\n  )\n  ORDER BY position ASC\n  LIMIT 1\n)"
    },
    {
        "question_id": 1002,
        "db_id": "formula_1",
        "Original SQL": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
        "Generated SQL": "SELECT surname, nationality, races.name\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nJOIN races ON results.raceId = races.raceId\nORDER BY dob ASC\nLIMIT 1"
    },
    {
        "question_id": 1003,
        "db_id": "formula_1",
        "Original SQL": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
        "Generated SQL": "SELECT driverId, COUNT(*) AS accidents\nFROM results\nWHERE raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix' AND country = 'Canada')\nGROUP BY driverId\nORDER BY accidents DESC\nLIMIT 1"
    },
    {
        "question_id": 1011,
        "db_id": "formula_1",
        "Original SQL": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
        "Generated SQL": "SELECT drivers.forename, drivers.surname\nFROM drivers\nINNER JOIN lapTimes\nON drivers.driverId = lapTimes.driverId\nORDER BY lapTimes.milliseconds ASC\nLIMIT 20"
    },
    {
        "question_id": 1014,
        "db_id": "formula_1",
        "Original SQL": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
        "Generated SQL": "SELECT * FROM lapTimes\nWHERE circuitId IN (SELECT circuitId FROM circuits WHERE country = 'Italy')"
    },
    {
        "question_id": 719,
        "db_id": "superhero",
        "Original SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
        "Generated SQL": "SELECT superhero_name\nFROM superhero\nJOIN hero_power ON superhero.id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power_name = 'Super Strength'\nAND superhero.height_cm > 200"
    },
    {
        "question_id": 723,
        "db_id": "superhero",
        "Original SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
        "Generated SQL": "SELECT COUNT(*) FROM superhero\nINNER JOIN colour ON superhero.eye_colour_id = colour.id\nINNER JOIN superpower ON hero_power.power_id = superpower.id\nWHERE colour.colour = 'blue' AND superpower.power_name = 'Agility'"
    },
    {
        "question_id": 724,
        "db_id": "superhero",
        "Original SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
        "Generated SQL": "SELECT superhero_name FROM superhero WHERE eye_colour_id = 1 AND hair_colour_id = 2"
    },
    {
        "question_id": 726,
        "db_id": "superhero",
        "Original SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
        "Generated SQL": "SELECT superhero_name, height_cm\nFROM superhero\nINNER JOIN publisher ON superhero.publisher_id = publisher.id\nWHERE publisher_name = 'Marvel Comics'\nORDER BY height_cm DESC"
    },
    {
        "question_id": 728,
        "db_id": "superhero",
        "Original SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
        "Generated SQL": "SELECT superhero_name\nFROM superhero\nORDER BY COUNT(eye_colour_id) DESC"
    },
    {
        "question_id": 730,
        "db_id": "superhero",
        "Original SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "Generated SQL": "SELECT superhero_name FROM superhero\nINNER JOIN hero_power ON superhero.id = hero_power.hero_id\nINNER JOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power_name = 'Super Strength'"
    },
    {
        "question_id": 732,
        "db_id": "superhero",
        "Original SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1",
        "Generated SQL": "SELECT publisher_name\nFROM publisher\nJOIN superhero ON publisher.id = superhero.publisher_id\nGROUP BY publisher.id\nORDER BY AVG(height_cm) DESC\nLIMIT 1"
    },
    {
        "question_id": 733,
        "db_id": "superhero",
        "Original SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'",
        "Generated SQL": "SELECT COUNT(*)\nFROM superhero\nWHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'gold')"
    },
    {
        "question_id": 736,
        "db_id": "superhero",
        "Original SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
        "Generated SQL": "SELECT superhero_name\nFROM superhero\nWHERE weight_kg = (\n  SELECT MIN(weight_kg)\n  FROM superhero\n)"
    },
    {
        "question_id": 737,
        "db_id": "superhero",
        "Original SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
        "Generated SQL": "SELECT race FROM superhero WHERE superhero_name = 'Copycat'"
    },
    {
        "question_id": 738,
        "db_id": "superhero",
        "Original SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
        "Generated SQL": "SELECT superhero_name\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50"
    },
    {
        "question_id": 739,
        "db_id": "superhero",
        "Original SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "Generated SQL": "SELECT superhero_name FROM superhero\nINNER JOIN hero_power ON superhero.id = hero_power.hero_id\nINNER JOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power_name = 'Death Touch'"
    },
    {
        "question_id": 740,
        "db_id": "superhero",
        "Original SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
        "Generated SQL": "SELECT COUNT(*) FROM superhero\nWHERE gender_id = 1 AND strength = 100"
    },
    {
        "question_id": 743,
        "db_id": "superhero",
        "Original SQL": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
        "Generated SQL": "SELECT\n  COUNT(*) / (SELECT COUNT(*) FROM superhero) * 100 AS percentage,\n  publisher_name\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE publisher_name = 'Marvel Comics'\nGROUP BY publisher_name"
    },
    {
        "question_id": 744,
        "db_id": "superhero",
        "Original SQL": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
        "Generated SQL": "SELECT publisher_name\nFROM publisher\nWHERE publisher_name IN (\n  SELECT publisher_name\n  FROM superhero\n  GROUP BY publisher_name\n  HAVING COUNT(*) > (\n    SELECT COUNT(*)\n    FROM superhero\n    GROUP BY publisher_name\n    HAVING publisher_name = 'DC Comics'\n  )\n)"
    },
    {
        "question_id": 745,
        "db_id": "superhero",
        "Original SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "Generated SQL": "SELECT publisher_id FROM superhero WHERE publisher_name = 'Star Trek'"
    },
    {
        "question_id": 747,
        "db_id": "superhero",
        "Original SQL": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
        "Generated SQL": "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL"
    },
    {
        "question_id": 750,
        "db_id": "superhero",
        "Original SQL": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
        "Generated SQL": "SELECT AVG(weight_kg)\nFROM superhero\nWHERE gender_id = (SELECT id FROM gender WHERE gender = 'female')"
    },
    {
        "question_id": 751,
        "db_id": "superhero",
        "Original SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
        "Generated SQL": "SELECT power_name FROM superpower\nJOIN hero_power ON superpower.id = hero_power.power_id\nJOIN superhero ON hero_power.hero_id = superhero.id\nWHERE superhero.gender_id = 1"
    },
    {
        "question_id": 753,
        "db_id": "superhero",
        "Original SQL": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
        "Generated SQL": "SELECT superhero_name\nFROM superhero\nWHERE height_cm BETWEEN 170 AND 190\nAND eye_colour_id IS NULL"
    },
    {
        "question_id": 758,
        "db_id": "superhero",
        "Original SQL": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
        "Generated SQL": "SELECT hair_colour_id\nFROM superhero\nWHERE height_cm = 185"
    },
    {
        "question_id": 760,
        "db_id": "superhero",
        "Original SQL": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
        "Generated SQL": "SELECT\n  COUNT(*) / (SELECT COUNT(*) FROM superhero) AS percentage\nFROM superhero\nWHERE\n  height_cm BETWEEN 150 AND 180\n  AND publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')"
    },
    {
        "question_id": 761,
        "db_id": "superhero",
        "Original SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
        "Generated SQL": "SELECT superhero_name\nFROM superhero\nWHERE gender_id = 1\nAND weight_kg > (SELECT weight_kg * 0.79 FROM superhero)"
    },
    {
        "question_id": 764,
        "db_id": "superhero",
        "Original SQL": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
        "Generated SQL": "SELECT power_name FROM superpower\nINNER JOIN hero_power ON superpower.id = hero_power.power_id\nINNER JOIN superhero ON hero_power.hero_id = superhero.id\nWHERE superhero.id = 1"
    },
    {
        "question_id": 765,
        "db_id": "superhero",
        "Original SQL": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
        "Generated SQL": "SELECT COUNT(*)\nFROM superhero\nINNER JOIN hero_power ON superhero.id = hero_power.hero_id\nINNER JOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power_name ='stealth'"
    },
    {
        "question_id": 766,
        "db_id": "superhero",
        "Original SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "Generated SQL": "SELECT superhero.full_name\nFROM superhero\nINNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nINNER JOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute.attribute_name ='strength'\nORDER BY attribute_value DESC\nLIMIT 1"
    },
    {
        "question_id": 769,
        "db_id": "superhero",
        "Original SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "Generated SQL": "SELECT superhero_name\nFROM superhero\nINNER JOIN publisher ON superhero.publisher_id = publisher.id\nWHERE publisher_name = 'Dark Horse Comics'\nGROUP BY superhero_name\nORDER BY MAX(weight_kg) DESC\nLIMIT 1"
    },
    {
        "question_id": 772,
        "db_id": "superhero",
        "Original SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
        "Generated SQL": "SELECT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id\nFROM superhero\nWHERE superhero.gender_id = (SELECT gender.id FROM gender WHERE gender.gender = 'female')\nAND superhero.publisher_id = (SELECT publisher.id FROM publisher WHERE publisher.publisher_name = 'Dark Horse Comics')"
    },
    {
        "question_id": 773,
        "db_id": "superhero",
        "Original SQL": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id",
        "Generated SQL": "SELECT superhero_name, publisher_name\nFROM superhero\nWHERE eye_colour_id = hair_colour_id AND eye_colour_id = skin_colour_id"
    },
    {
        "question_id": 775,
        "db_id": "superhero",
        "Original SQL": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'",
        "Generated SQL": "SELECT\n  COUNT(*) / (SELECT COUNT(*) FROM superhero WHERE gender_id = 2)\nFROM superhero\nWHERE gender_id = 2\nAND hair_colour_id = 2"
    },
    {
        "question_id": 779,
        "db_id": "superhero",
        "Original SQL": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'",
        "Generated SQL": "SELECT COUNT(*) FROM hero_power\nWHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Amazo')"
    },
    {
        "question_id": 781,
        "db_id": "superhero",
        "Original SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
        "Generated SQL": "SELECT superhero.height_cm\nFROM superhero\nINNER JOIN colour ON superhero.eye_colour_id = colour.id\nWHERE colour.colour = 'amber'"
    },
    {
        "question_id": 782,
        "db_id": "superhero",
        "Original SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'",
        "Generated SQL": "SELECT superhero_name\nFROM superhero\nWHERE eye_colour_id = 1 AND hair_colour_id = 1"
    },
    {
        "question_id": 785,
        "db_id": "superhero",
        "Original SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "Generated SQL": "SELECT superhero_name\nFROM superhero\nWHERE alignment_id = 1"
    },
    {
        "question_id": 786,
        "db_id": "superhero",
        "Original SQL": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )",
        "Generated SQL": "SELECT COUNT(*) FROM superhero\nWHERE id IN (\n  SELECT hero_id FROM hero_attribute\n  WHERE attribute_id = (\n    SELECT id FROM attribute WHERE attribute_name ='strength'\n  )\n  ORDER BY attribute_value DESC\n  LIMIT 1\n)"
    },
    {
        "question_id": 788,
        "db_id": "superhero",
        "Original SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' AND T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) * 100 FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id",
        "Generated SQL": "SELECT COUNT(*)\nFROM superhero\nWHERE gender_id = 1\nAND publisher_id = 1"
    },
    {
        "question_id": 790,
        "db_id": "superhero",
        "Original SQL": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE",
        "Generated SQL": "SELECT superhero_name, weight_kg\nFROM superhero\nWHERE superhero_name = 'Emil Blonsky' OR superhero_name = 'Charles Chandler'"
    },
    {
        "question_id": 791,
        "db_id": "superhero",
        "Original SQL": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero",
        "Generated SQL": "SELECT AVG(height_cm)\nFROM superhero"
    },
    {
        "question_id": 792,
        "db_id": "superhero",
        "Original SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
        "Generated SQL": "SELECT power_name FROM superpower\nINNER JOIN hero_power ON superpower.id = hero_power.power_id\nINNER JOIN superhero ON hero_power.hero_id = superhero.id\nWHERE superhero_name = 'Abomination'"
    },
    {
        "question_id": 794,
        "db_id": "superhero",
        "Original SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "Generated SQL": "SELECT superhero_name\nFROM superhero\nWHERE height_cm = (SELECT MAX(height_cm) FROM superhero)"
    },
    {
        "question_id": 796,
        "db_id": "superhero",
        "Original SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
        "Generated SQL": "SELECT superhero_name, attribute_name, attribute_value\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE superhero_name = '3-D Man'"
    },
    {
        "question_id": 797,
        "db_id": "superhero",
        "Original SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
        "Generated SQL": "SELECT superhero_name\nFROM superhero\nWHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'blue')\n  AND hair_colour_id = (SELECT id FROM colour WHERE colour = 'brown')"
    },
    {
        "question_id": 798,
        "db_id": "superhero",
        "Original SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
        "Generated SQL": "SELECT publisher_name\nFROM superhero\nWHERE superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')"
    },
    {
        "question_id": 800,
        "db_id": "superhero",
        "Original SQL": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id",
        "Generated SQL": "SELECT\n  COUNT(*) / (SELECT COUNT(*) FROM superhero) AS percentage\nFROM\n  colour\nWHERE\n  colour.id = superhero.eye_colour_id\n  AND colour.colour = 'blue'"
    },
    {
        "question_id": 801,
        "db_id": "superhero",
        "Original SQL": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id",
        "Generated SQL": "SELECT\n  COUNT(CASE WHEN gender_id = 1 THEN 1 END) / COUNT(CASE WHEN gender_id = 2 THEN 1 END)\nFROM superhero"
    },
    {
        "question_id": 806,
        "db_id": "superhero",
        "Original SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
        "Generated SQL": "SELECT eye_colour_id\nFROM superhero\nWHERE full_name = '<NAME>'"
    },
    {
        "question_id": 819,
        "db_id": "superhero",
        "Original SQL": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL",
        "Generated SQL": "SELECT\n  (SELECT COUNT(*) FROM superhero WHERE eye_colour_id = 1) - (SELECT COUNT(*) FROM superhero WHERE eye_colour_id IS NULL)"
    },
    {
        "question_id": 822,
        "db_id": "superhero",
        "Original SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'",
        "Generated SQL": "SELECT COUNT(*) FROM superhero\nWHERE skin_colour_id = (SELECT id FROM colour WHERE colour = 'green')"
    },
    {
        "question_id": 824,
        "db_id": "superhero",
        "Original SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name",
        "Generated SQL": "SELECT superhero_name\nFROM superhero\nWHERE power_id IN (\n  SELECT id\n  FROM superpower\n  WHERE power_name = 'wind control'\n)\nORDER BY superhero_name"
    },
    {
        "question_id": 825,
        "db_id": "superhero",
        "Original SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
        "Generated SQL": "SELECT superhero_name\nFROM superhero\nWHERE gender_id = (\n  SELECT id\n  FROM gender\n  WHERE gender = 'F'\n)"
    },
    {
        "question_id": 829,
        "db_id": "superhero",
        "Original SQL": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
        "Generated SQL": "SELECT publisher_name, COUNT(*)\nFROM superhero\nGROUP BY publisher_name\nORDER BY COUNT(*) DESC\nLIMIT 1"
    },
    {
        "question_id": 531,
        "db_id": "codebase_community",
        "Original SQL": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
        "Generated SQL": "SELECT * FROM users\nWHERE DisplayName = 'Harlan' OR DisplayName = 'Jarrod Dixon'\nORDER BY Reputation DESC\nLIMIT 1"
    },
    {
        "question_id": 532,
        "db_id": "codebase_community",
        "Original SQL": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'",
        "Generated SQL": "SELECT DisplayName\nFROM users\nWHERE CreationDate LIKE '2011%'"
    },
    {
        "question_id": 533,
        "db_id": "codebase_community",
        "Original SQL": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
        "Generated SQL": "SELECT COUNT(*)\nFROM users\nWHERE LastAccessDate > '2014-09-01'"
    },
    {
        "question_id": 539,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
        "Generated SQL": "SELECT * FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = (SELECT PostId FROM postHistory WHERE PostHistoryTypeId = 3 AND Text = 'Eliciting priors from experts'))"
    },
    {
        "question_id": 537,
        "db_id": "codebase_community",
        "Original SQL": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "Generated SQL": "SELECT COUNT(*) FROM posts WHERE OwnerUserId = 'csgillespie'"
    },
    {
        "question_id": 544,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
        "Generated SQL": "SELECT DISTINCT LastEditorDisplayName\nFROM posts\nWHERE Id = 'Examples for teaching: Correlation does not mean causation'"
    },
    {
        "question_id": 547,
        "db_id": "codebase_community",
        "Original SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65",
        "Generated SQL": "SELECT COUNT(*)\nFROM posts\nWHERE OwnerUserId IN (\n  SELECT Id\n  FROM users\n  WHERE Age > 20\n)\nAND Score > 19"
    },
    {
        "question_id": 549,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
        "Generated SQL": "SELECT body FROM posts\nINNER JOIN tags ON posts.Id = tags.ExcerptPostId\nWHERE tags.TagName = 'bayesian'"
    },
    {
        "question_id": 555,
        "db_id": "codebase_community",
        "Original SQL": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
        "Generated SQL": "SELECT AVG(Score)\nFROM posts\nWHERE OwnerUserId = 'csgillespie'"
    },
    {
        "question_id": 557,
        "db_id": "codebase_community",
        "Original SQL": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
        "Generated SQL": "SELECT\n    COUNT(*) AS elder_posts,\n    COUNT(CASE WHEN LastEditorUserId > 0 THEN 1 ELSE NULL END) AS elder_posts_with_score_over_5\nFROM\n    posts\nWHERE\n    Score > 5"
    },
    {
        "question_id": 563,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025",
        "Generated SQL": "SELECT SUM(FavoriteCount)\nFROM posts\nWHERE LastEditorUserId = 3025\nAND LastEditDate = '2014-04-23 20:29:39'"
    },
    {
        "question_id": 565,
        "db_id": "codebase_community",
        "Original SQL": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'",
        "Generated SQL": "SELECT * FROM posts WHERE Id = (SELECT PostId FROM comments WHERE UserId = 23853 AND CreationDate = '2013-07-12 09:08:18')"
    },
    {
        "question_id": 567,
        "db_id": "codebase_community",
        "Original SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'",
        "Generated SQL": "SELECT"
    },
    {
        "question_id": 568,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347",
        "Generated SQL": "SELECT DisplayName\nFROM users\nWHERE Id = (\n    SELECT UserId\n    FROM votes\n    WHERE Id = 6347\n)"
    },
    {
        "question_id": 571,
        "db_id": "codebase_community",
        "Original SQL": "SELECT CAST(COUNT(DISTINCT T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
        "Generated SQL": "SELECT\n  COUNT(*)\nFROM\n  posts\nWHERE\n  OwnerUserId = 24"
    },
    {
        "question_id": 572,
        "db_id": "codebase_community",
        "Original SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "Generated SQL": "SELECT SUM(ViewCount)\nFROM posts\nWHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'"
    },
    {
        "question_id": 573,
        "db_id": "codebase_community",
        "Original SQL": "SELECT Text FROM comments WHERE Score = 17",
        "Generated SQL": "SELECT * FROM comments WHERE Score = 17"
    },
    {
        "question_id": 576,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'",
        "Generated SQL": "SELECT DISTINCT users.DisplayName\nFROM comments\nINNER JOIN users ON comments.UserId = users.Id\nWHERE comments.Text LIKE '%thank you user93%'"
    },
    {
        "question_id": 578,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
        "Generated SQL": "SELECT users.DisplayName, users.Reputation\nFROM users\nINNER JOIN posts ON users.Id = posts.OwnerUserId\nWHERE posts.Title = 'Understanding what Dassault iSight is doing?'"
    },
    {
        "question_id": 581,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'",
        "Generated SQL": "SELECT * FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data?')"
    },
    {
        "question_id": 586,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
        "Generated SQL": "SELECT *\nFROM users\nWHERE Id IN (\n  SELECT UserId\n  FROM votes\n  WHERE PostId IN (\n    SELECT Id\n    FROM posts\n    WHERE Title LIKE '%variance%'\n  )\n  AND BountyAmount = 50\n)"
    },
    {
        "question_id": 587,
        "db_id": "codebase_community",
        "Original SQL": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text ",
        "Generated SQL": "SELECT posts.Title, comments.Text\nFROM posts\nINNER JOIN comments ON posts.Id = comments.PostId\nWHERE posts.Tags LIKE '%humor%'\nORDER BY posts.ViewCount ASC"
    },
    {
        "question_id": 592,
        "db_id": "codebase_community",
        "Original SQL": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
        "Generated SQL": "SELECT COUNT(*)\nFROM users\nWHERE Id IN (\n  SELECT UserId\n  FROM badges\n  GROUP BY UserId\n  HAVING COUNT(*) > 5\n)"
    },
    {
        "question_id": 595,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
        "Generated SQL": "SELECT DISTINCT u.DisplayName\nFROM users AS u\nINNER JOIN postHistory AS ph ON u.Id = ph.UserId\nINNER JOIN posts AS p ON ph.PostId = p.Id\nWHERE p.ViewCount >= 1000\nGROUP BY u.Id\nHAVING COUNT(ph.Id) = 1"
    },
    {
        "question_id": 598,
        "db_id": "codebase_community",
        "Original SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'",
        "Generated SQL": "SELECT\n  (SELECT COUNT(*) FROM badges WHERE Date BETWEEN '2010-01-01' AND '2011-01-01' AND Name = 'Student') /\n  (SELECT COUNT(*) FROM badges WHERE Date BETWEEN '2010-01-01' AND '2011-01-01')"
    },
    {
        "question_id": 604,
        "db_id": "codebase_community",
        "Original SQL": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId",
        "Generated SQL": "SELECT AVG(upvotes) AS avg_upvotes, AVG(age) AS avg_age\nFROM users\nINNER JOIN posts ON users.id = posts.owneruserid\nWHERE posts.posttypeid = 1 AND users.reputation > 10"
    },
    {
        "question_id": 629,
        "db_id": "codebase_community",
        "Original SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes",
        "Generated SQL": "SELECT\n  (SELECT COUNT(*) FROM votes WHERE CreationDate BETWEEN '2010-01-01' AND '2011-01-01') /\n  (SELECT COUNT(*) FROM votes WHERE CreationDate BETWEEN '2011-01-01' AND '2012-01-01')\nFROM votes"
    },
    {
        "question_id": 633,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "Generated SQL": "SELECT Id FROM posts WHERE Title = 'Which post by slashnick has the most answers count?'"
    },
    {
        "question_id": 634,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "Generated SQL": "SELECT * FROM posts\nWHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName IN ('Harvey Motulsky', 'Noah Snyder'))\nORDER BY Score DESC"
    },
    {
        "question_id": 637,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
        "Generated SQL": "SELECT DISTINCT tags.TagName\nFROM posts\nINNER JOIN tags ON posts.Id = tags.ExcerptPostId\nINNER JOIN comments ON posts.Id = comments.PostId\nWHERE posts.OwnerUserId = 6\nAND comments.PostId IS NULL"
    },
    {
        "question_id": 639,
        "db_id": "codebase_community",
        "Original SQL": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
        "Generated SQL": "SELECT\n  ROUND(\n    (\n      SELECT COUNT(*)\n      FROM posts\n      WHERE LOWER(Body) LIKE '%r%'\n    ) /\n    (\n      SELECT COUNT(*)\n      FROM posts\n    )\n , 2)\nAS \"Percentage of Posts Using R\""
    },
    {
        "question_id": 640,
        "db_id": "codebase_community",
        "Original SQL": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
        "Generated SQL": "SELECT\n  posts.Id,\n  posts.CreationDate,\n  posts.ViewCount,\n  users.DisplayName\nFROM\n  posts\n  INNER JOIN users ON posts.OwnerUserId = users.Id\nWHERE\n  users.DisplayName IN ('Amos', 'Mornington')\nORDER BY\n  posts.CreationDate ASC"
    },
    {
        "question_id": 665,
        "db_id": "codebase_community",
        "Original SQL": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'",
        "Generated SQL": "SELECT AVG(LinkCount)\nFROM (\n  SELECT COUNT(*) AS LinkCount\n  FROM postLinks\n  WHERE PostId IN (\n    SELECT Id\n    FROM posts\n    WHERE AnswerCount < 3\n  )\n  AND CreationDate BETWEEN '2010-01-01' AND '2010-12-31'\n)"
    },
    {
        "question_id": 669,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
        "Generated SQL": "SELECT\n    chl.CreationDate\nFROM\n    votes AS chl\nWHERE\n    chl.PostId =?\nORDER BY\n    chl.CreationDate ASC\nLIMIT 1"
    },
    {
        "question_id": 671,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
        "Generated SQL": "SELECT DISTINCT DisplayName\nFROM users\nWHERE Id IN (\n  SELECT DISTINCT UserId\n  FROM badges\n  WHERE Name = 'Autobiographer'\n)"
    },
    {
        "question_id": 672,
        "db_id": "codebase_community",
        "Original SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
        "Generated SQL": "SELECT COUNT(*)\nFROM users\nWHERE users.Location = 'United Kingdom'\n  AND (SELECT SUM(posts.FavoriteCount)\n       FROM posts\n       WHERE posts.OwnerUserId = users.Id) >= 4"
    },
    {
        "question_id": 678,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
        "Generated SQL": "SELECT Id, Title\nFROM Posts\nWHERE OwnerUserId = (SELECT Id FROM Users WHERE DisplayName = 'Harvey Motulsky')\nORDER BY ViewCount DESC\nLIMIT 1"
    },
    {
        "question_id": 682,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1",
        "Generated SQL": "SELECT posts.Id, users.DisplayName\nFROM posts\nINNER JOIN users ON posts.OwnerUserId = users.Id\nWHERE posts.CreationDate BETWEEN '2010-01-01' AND '2010-12-31'\nORDER BY posts.Score DESC\nLIMIT 1"
    },
    {
        "question_id": 683,
        "db_id": "codebase_community",
        "Original SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
        "Generated SQL": "SELECT\n  COUNT(*) / COUNT(DISTINCT OwnerUserId)\nFROM\n  posts\nWHERE\n  CreationDate BETWEEN '2011-01-01' AND '2011-12-31'\n  AND OwnerUserId IS NOT NULL\n  AND Reputation > 1000"
    },
    {
        "question_id": 685,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "Generated SQL": "SELECT SUM(ViewCount) AS TotalViews, UserDisplayName\nFROM posts\nWHERE Title = 'Computer Game Datasets'\nGROUP BY UserDisplayName\nORDER BY TotalViews DESC\nLIMIT 1"
    },
    {
        "question_id": 687,
        "db_id": "codebase_community",
        "Original SQL": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY T1.Score DESC LIMIT 1",
        "Generated SQL": "SELECT COUNT(*)\nFROM comments\nWHERE PostId = (SELECT MAX(Score) FROM posts)"
    },
    {
        "question_id": 694,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
        "Generated SQL": "SELECT Text, UserDisplayName\nFROM comments\nWHERE PostId =\n  (SELECT Id\n   FROM posts\n   WHERE Title = 'Analysing wind data with R')\nORDER BY CreationDate DESC\nLIMIT 10"
    },
    {
        "question_id": 704,
        "db_id": "codebase_community",
        "Original SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
        "Generated SQL": "SELECT\n  tags.ExcerptPostId,\n  tags.WikiPostId\nFROM tags\nWHERE tags.TagName ='sample'"
    },
    {
        "question_id": 705,
        "db_id": "codebase_community",
        "Original SQL": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
        "Generated SQL": "SELECT users.Reputation, votes.UpVotes\nFROM users\nINNER JOIN votes ON users.Id = votes.UserId\nINNER JOIN comments ON users.Id = comments.UserId\nWHERE comments.Text = 'fine, you win :D'"
    },
    {
        "question_id": 707,
        "db_id": "codebase_community",
        "Original SQL": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1",
        "Generated SQL": "SELECT *\nFROM comments\nWHERE PostId IN (\n  SELECT Id\n  FROM posts\n  WHERE ViewCount BETWEEN 100 AND 150\n)\nORDER BY Score DESC\nLIMIT 1"
    },
    {
        "question_id": 710,
        "db_id": "codebase_community",
        "Original SQL": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
        "Generated SQL": "SELECT COUNT(*)\nFROM comments\nWHERE PostId IN (\n  SELECT Id\n  FROM posts\n  WHERE CommentCount = 1\n)\nAND Score = 0"
    },
    {
        "question_id": 716,
        "db_id": "codebase_community",
        "Original SQL": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10",
        "Generated SQL": "SELECT\n    COUNT(DISTINCT UserId) / COUNT(DISTINCT UserId) * 100\nFROM\n    comments\nWHERE\n    Score BETWEEN 5 AND 10\n    AND UpVotes = 0"
    },
    {
        "question_id": 340,
        "db_id": "card_games",
        "Original SQL": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "Generated SQL": "SELECT cards.name FROM cards\nINNER JOIN cards_foil ON cards.uuid = cards_foil.uuid\nINNER JOIN cards_foil ON cards.uuid = cards_foil.uuid\nWHERE cards_foil.foil_price > cards.price"
    },
    {
        "question_id": 341,
        "db_id": "card_games",
        "Original SQL": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
        "Generated SQL": null
    },
    {
        "question_id": 344,
        "db_id": "card_games",
        "Original SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "Generated SQL": "SELECT cards.name\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nJOIN sets ON cards.setCode = sets.code\nWHERE legalities.format = 'gladiator'\nAND legalities.status = 'banned'\nAND cards.rarity ='mythic'\nAND sets.type = 'core'"
    },
    {
        "question_id": 346,
        "db_id": "card_games",
        "Original SQL": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')",
        "Generated SQL": "SELECT cards.id, cards.artist\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE cards.power = '0'\nAND legalities.format = 'Commander'\nAND legalities.status = 'Legal'"
    },
    {
        "question_id": 347,
        "db_id": "card_games",
        "Original SQL": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'",
        "Generated SQL": "SELECT cards.name, rulings.text, legalities.format, legalities.status\nFROM cards\nINNER JOIN foreign_data ON foreign_data.uuid = cards.uuid\nINNER JOIN rulings ON rulings.uuid = cards.uuid\nINNER JOIN legalities ON legalities.uuid = cards.uuid\nWHERE foreign_data.name = '<NAME>'"
    },
    {
        "question_id": 349,
        "db_id": "card_games",
        "Original SQL": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1",
        "Generated SQL": "SELECT name, artist, count(*) as count, isPromo\nFROM cards\nJOIN rulings ON cards.uuid = rulings.uuid\nGROUP BY name, artist, isPromo\nORDER BY count DESC\nLIMIT 1"
    },
    {
        "question_id": 352,
        "db_id": "card_games",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "Generated SQL": "SELECT\n  COUNT(*) AS total,\n  COUNT(CASE WHEN language = 'zh-CN' THEN 1 END) AS simplified\nFROM foreign_data"
    },
    {
        "question_id": 356,
        "db_id": "card_games",
        "Original SQL": "SELECT COUNT(*) FROM cards WHERE power = '*'",
        "Generated SQL": "SELECT COUNT(*) FROM cards WHERE power = '\u221e'"
    },
    {
        "question_id": 358,
        "db_id": "card_games",
        "Original SQL": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
        "Generated SQL": "SELECT cards.borderColor\nFROM cards\nWHERE cards.name = \"Ancestor's Chosen\""
    },
    {
        "question_id": 366,
        "db_id": "card_games",
        "Original SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "Generated SQL": "SELECT * FROM cards WHERE name = \"Benalish Knight\""
    },
    {
        "question_id": 368,
        "db_id": "card_games",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
        "Generated SQL": "SELECT\n  COUNT(*) AS total,\n  COUNT(CASE WHEN borderColor = 'Borderless' THEN 1 END) AS borderless\nFROM cards"
    },
    {
        "question_id": 371,
        "db_id": "card_games",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1",
        "Generated SQL": "SELECT\n  COUNT(CASE WHEN language = 'French' THEN 1 END) / COUNT(*) AS percentage\nFROM\n  foreign_data\nWHERE\n  uuid IN (\n    SELECT\n      uuid\n    FROM\n      cards\n    WHERE\n      isStorySpotlight = 1\n  )"
    },
    {
        "question_id": 377,
        "db_id": "card_games",
        "Original SQL": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'",
        "Generated SQL": "SELECT COUNT(*) FROM cards WHERE originalType = \"Summon - Angel\" AND subtype NOT LIKE \"%Angel%\""
    },
    {
        "question_id": 379,
        "db_id": "card_games",
        "Original SQL": "SELECT id FROM cards WHERE duelDeck = 'a'",
        "Generated SQL": "SELECT cards.id FROM cards WHERE cards.duelDeck = 'a'"
    },
    {
        "question_id": 383,
        "db_id": "card_games",
        "Original SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
        "Generated SQL": "SELECT COUNT(*) FROM cards\nWHERE uuid IN (\n  SELECT uuid FROM cards\n  WHERE borderColor = 'W'\n  AND uuid IN (\n    SELECT uuid FROM legalities\n    WHERE format = 'Banned'\n  )\n)"
    },
    {
        "question_id": 391,
        "db_id": "card_games",
        "Original SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
        "Generated SQL": "SELECT cards.name, foreign_data.name, foreign_data.language\nFROM cards\nJOIN foreign_data ON foreign_data.uuid = cards.uuid\nWHERE cards.type = 'Artifact'\nAND cards.colors = 'B'\nAND foreign_data.language = 'French'"
    },
    {
        "question_id": 397,
        "db_id": "card_games",
        "Original SQL": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'",
        "Generated SQL": "SELECT cards.manaCost\nFROM cards\nWHERE cards.layout = 'normal'\nAND cards.frameVersion = '2003'\nAND cards.borderColor = 'black'\nAND cards.availability = 'paper'\nAND cards.availability ='mtgo'"
    },
    {
        "question_id": 402,
        "db_id": "card_games",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN isTextless = 0 AND  isStorySpotlight = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
        "Generated SQL": "SELECT cards.id, cards.name, cards.text, cards.isStorySpotlight\nFROM cards\nWHERE cards.isStorySpotlight = 1 AND cards.text = ''"
    },
    {
        "question_id": 405,
        "db_id": "card_games",
        "Original SQL": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'",
        "Generated SQL": "SELECT COUNT(*) FROM sets WHERE code LIKE 'cmr%' AND code IN (SELECT code FROM set_translations WHERE language = 'pt-BR')"
    },
    {
        "question_id": 407,
        "db_id": "card_games",
        "Original SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "Generated SQL": "SELECT DISTINCT type FROM cards WHERE language = 'de'"
    },
    {
        "question_id": 408,
        "db_id": "card_games",
        "Original SQL": "SELECT Count(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'",
        "Generated SQL": null
    },
    {
        "question_id": 409,
        "db_id": "card_games",
        "Original SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
        "Generated SQL": null
    },
    {
        "question_id": 412,
        "db_id": "card_games",
        "Original SQL": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
        "Generated SQL": "SELECT name FROM foreign_data WHERE language = 'French' AND type = 'Creature' AND layout = 'normal' AND borderColor = 'black'"
    },
    {
        "question_id": 414,
        "db_id": "card_games",
        "Original SQL": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
        "Generated SQL": "SELECT set_translations.language\nFROM sets\nINNER JOIN set_translations ON sets.code = set_translations.setCode\nWHERE sets.block = 'Ravnica'"
    },
    {
        "question_id": 415,
        "db_id": "card_games",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
        "Generated SQL": "SELECT\n  COUNT(CASE WHEN cards.hasContentWarning = 0 THEN 1 END) / COUNT(*)\nFROM\n  cards\n  JOIN legalities ON cards.uuid = legalities.uuid\n  JOIN sets ON cards.setCode = sets.code\nWHERE\n  sets.type = 'commander'\n  AND legalities.status = 'legal'"
    },
    {
        "question_id": 416,
        "db_id": "card_games",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'",
        "Generated SQL": "SELECT\n  COUNT(CASE WHEN power IS NULL THEN 1 END) / COUNT(*) AS percentage\nFROM cards\nWHERE language = 'fr'"
    },
    {
        "question_id": 422,
        "db_id": "card_games",
        "Original SQL": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
        "Generated SQL": "SELECT language FROM foreign_data WHERE multiverseid = 149934"
    },
    {
        "question_id": 424,
        "db_id": "card_games",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards",
        "Generated SQL": "SELECT\n  COUNT(*) AS total_cards,\n  COUNT(CASE WHEN layout = 'normal' THEN 1 ELSE NULL END) AS normal_cards\nFROM cards"
    },
    {
        "question_id": 427,
        "db_id": "card_games",
        "Original SQL": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
        "Generated SQL": "SELECT DISTINCT language FROM set_translations WHERE setCode = 'ARC'"
    },
    {
        "question_id": 440,
        "db_id": "card_games",
        "Original SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
        "Generated SQL": "SELECT * FROM set_translations WHERE setCode = 'A PEDRA FELWAR' AND language = 'pt'"
    },
    {
        "question_id": 459,
        "db_id": "card_games",
        "Original SQL": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
        "Generated SQL": "SELECT cards.name, cards.convertedManaCost\nFROM cards\nWHERE cards.name IN (\"Serra Angel\", \"Shrine Keeper\")\nORDER BY cards.convertedManaCost DESC"
    },
    {
        "question_id": 462,
        "db_id": "card_games",
        "Original SQL": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'",
        "Generated SQL": "SELECT set_translations.translation\nFROM set_translations\nINNER JOIN cards ON set_translations.setCode = cards.setCode\nWHERE cards.name = \"Ancestor's Chosen\""
    },
    {
        "question_id": 465,
        "db_id": "card_games",
        "Original SQL": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
        "Generated SQL": "SELECT * FROM cards\nWHERE name = 'Ancestor's Chosen'\nAND setCode IN (\n  SELECT code FROM sets WHERE language = 'ko'\n)"
    },
    {
        "question_id": 466,
        "db_id": "card_games",
        "Original SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
        "Generated SQL": "SELECT COUNT(*) FROM cards\nWHERE setCode = \"HS10\" AND artist = \"<NAME>\""
    },
    {
        "question_id": 468,
        "db_id": "card_games",
        "Original SQL": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'",
        "Generated SQL": "SELECT set_translations.translation\nFROM sets\nINNER JOIN set_translations ON sets.code = set_translations.setCode\nWHERE sets.name = \"Eighth Edition\" AND set_translations.language = \"zh-CN\""
    },
    {
        "question_id": 469,
        "db_id": "card_games",
        "Original SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "Generated SQL": "SELECT * FROM cards WHERE name = \"Angel of Mercy\" AND isOnlineOnly = 1"
    },
    {
        "question_id": 472,
        "db_id": "card_games",
        "Original SQL": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL",
        "Generated SQL": "SELECT COUNT(*) FROM sets WHERE block = \"Ice Age\" AND EXISTS (SELECT * FROM set_translations WHERE setCode = sets.code AND language = \"it\")"
    },
    {
        "question_id": 473,
        "db_id": "card_games",
        "Original SQL": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
        "Generated SQL": "SELECT * FROM cards WHERE name = 'Adarkar Valkyrie' AND availability = 'https://mtgjson.com/api/v5/cards.json'"
    },
    {
        "question_id": 474,
        "db_id": "card_games",
        "Original SQL": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 100 AND T2.language = 'Italian'",
        "Generated SQL": "SELECT COUNT(*) FROM sets\nINNER JOIN set_translations ON sets.code = set_translations.setCode\nWHERE set_translations.language = 'it' AND sets.baseSetSize < 100"
    },
    {
        "question_id": 477,
        "db_id": "card_games",
        "Original SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
        "Generated SQL": "SELECT DISTINCT artist FROM cards WHERE setCode = 'coldsnap' AND artist IN ('<NAME>', '<NAME>', 'Chippy')"
    },
    {
        "question_id": 479,
        "db_id": "card_games",
        "Original SQL": "SELECT SUM(CASE WHEN T1.power = '*' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5",
        "Generated SQL": "SELECT COUNT(*) FROM cards\nWHERE setCode = 'CSD' AND convertedManaCost > 5 AND power = '0'"
    },
    {
        "question_id": 480,
        "db_id": "card_games",
        "Original SQL": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
        "Generated SQL": "SELECT flavorText FROM foreign_data WHERE uuid = 'a8a9b9e0-f9e8-4d0a-a9b9-e8f9d0a9b9e0' AND language = 'it'"
    },
    {
        "question_id": 483,
        "db_id": "card_games",
        "Original SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
        "Generated SQL": "SELECT text FROM rulings WHERE uuid IN (SELECT uuid FROM cards WHERE setCode = 'Coldsnap') AND language = 'it'"
    },
    {
        "question_id": 484,
        "db_id": "card_games",
        "Original SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
        "Generated SQL": "SELECT name FROM cards\nINNER JOIN sets ON cards.setCode = sets.code\nWHERE sets.code = 'Coldsnap'\nORDER BY cards.convertedManaCost DESC\nLIMIT 1"
    },
    {
        "question_id": 486,
        "db_id": "card_games",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
        "Generated SQL": "SELECT\n  COUNT(*) AS total,\n  COUNT(CASE WHEN cards.convertedManaCost = 7 THEN 1 END) AS convertedManaCost_7\nFROM cards\nJOIN sets ON cards.setCode = sets.code\nWHERE sets.code = 'COLD'"
    },
    {
        "question_id": 487,
        "db_id": "card_games",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
        "Generated SQL": "SELECT\n  COUNT(CASE WHEN cards.power > '1000' THEN 1 END) / COUNT(*) AS \"Percentage of incredibly powerful cards in the set Coldsnap\"\nFROM cards\nWHERE cards.setCode = 'CNS'"
    },
    {
        "question_id": 518,
        "db_id": "card_games",
        "Original SQL": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
        "Generated SQL": "SELECT\n  sets.type,\n  cards.name\nFROM\n  sets\n  JOIN cards ON sets.code = cards.setCode\n  JOIN legalities ON cards.uuid = legalities.uuid\nWHERE\n  legalities.status = 'Banned'\nGROUP BY\n  sets.type\nORDER BY\n  COUNT(*) DESC\nLIMIT 1"
    },
    {
        "question_id": 522,
        "db_id": "card_games",
        "Original SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
        "Generated SQL": "SELECT cards.name, legalities.format FROM cards\nINNER JOIN legalities ON cards.uuid = legalities.uuid\nWHERE legalities.format = 'Legacy'"
    },
    {
        "question_id": 528,
        "db_id": "card_games",
        "Original SQL": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )",
        "Generated SQL": null
    },
    {
        "question_id": 529,
        "db_id": "card_games",
        "Original SQL": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
        "Generated SQL": "SELECT DISTINCT s.code\nFROM sets s\nLEFT JOIN set_translations st ON st.setCode = s.code\nWHERE st.language = 'ko' AND st.translation IS NULL"
    },
    {
        "question_id": 530,
        "db_id": "card_games",
        "Original SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
        "Generated SQL": "SELECT DISTINCT frameVersion FROM cards WHERE frameVersion IS NOT NULL;\n\nSELECT DISTINCT name FROM cards WHERE name LIKE '%Banned%'"
    },
    {
        "question_id": 195,
        "db_id": "toxicology",
        "Original SQL": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
        "Generated SQL": "SELECT bond_type, count(*)\nFROM bond\nGROUP BY bond_type\nORDER BY count(*) DESC\nLIMIT 1"
    },
    {
        "question_id": 197,
        "db_id": "toxicology",
        "Original SQL": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
        "Generated SQL": "SELECT AVG(atom_id)\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE bond.bond_type ='single'"
    },
    {
        "question_id": 198,
        "db_id": "toxicology",
        "Original SQL": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
        "Generated SQL": null
    },
    {
        "question_id": 200,
        "db_id": "toxicology",
        "Original SQL": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
        "Generated SQL": "SELECT *\nFROM molecule\nWHERE molecule_id IN (\n  SELECT molecule_id\n  FROM connected\n  WHERE bond_id IN (\n    SELECT bond_id\n    FROM bond\n    WHERE bond_type = 'triple'\n  )\n)\nAND label = 'carcinogenic'"
    },
    {
        "question_id": 201,
        "db_id": "toxicology",
        "Original SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
        "Generated SQL": "SELECT\n  COUNT(*) / COUNT(DISTINCT molecule_id)\nFROM\n  atom\nWHERE\n  element = 'C'\n  AND bond_type = 'DOUBLE'"
    },
    {
        "question_id": 206,
        "db_id": "toxicology",
        "Original SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
        "Generated SQL": "SELECT element FROM atom\nWHERE atom_id IN (\n  SELECT atom_id2 FROM connected\n  WHERE bond_id = 'TR004_8_9'\n)"
    },
    {
        "question_id": 207,
        "db_id": "toxicology",
        "Original SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
        "Generated SQL": "SELECT element FROM atom\nWHERE atom_id IN (\n  SELECT atom_id2 FROM connected\n  WHERE bond_id IN (\n    SELECT bond_id FROM bond\n    WHERE bond_type = 'double'\n  )\n)"
    },
    {
        "question_id": 208,
        "db_id": "toxicology",
        "Original SQL": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t",
        "Generated SQL": "SELECT label\nFROM atom\nWHERE element = 'H'\nGROUP BY label\nORDER BY COUNT(*) DESC\nLIMIT 1"
    },
    {
        "question_id": 212,
        "db_id": "toxicology",
        "Original SQL": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t",
        "Generated SQL": "SELECT element FROM atom GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1"
    },
    {
        "question_id": 213,
        "db_id": "toxicology",
        "Original SQL": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
        "Generated SQL": "SELECT bond_type\nFROM bond\nWHERE bond_id IN (\n    SELECT bond_id\n    FROM connected\n    WHERE atom_id = 'TR004_8' AND atom_id2 = 'TR004_20'\n)"
    },
    {
        "question_id": 215,
        "db_id": "toxicology",
        "Original SQL": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "Generated SQL": "SELECT\n  COUNT(*)\nFROM\n  atom\nWHERE\n  element IN ('I', 'S')\n  AND\n  molecule_id IN (\n    SELECT\n      molecule_id\n    FROM\n      bond\n    WHERE\n      bond_type ='single'\n  )"
    },
    {
        "question_id": 218,
        "db_id": "toxicology",
        "Original SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "Generated SQL": null
    },
    {
        "question_id": 219,
        "db_id": "toxicology",
        "Original SQL": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
        "Generated SQL": "SELECT\n  COUNT(*) /\n  (SELECT COUNT(*) FROM bond WHERE bond_type = 'triple') * 100\nFROM molecule\nWHERE molecule_id IN (\n  SELECT DISTINCT molecule_id\n  FROM connected\n  WHERE bond_id IN (\n    SELECT bond_id\n    FROM bond\n    WHERE bond_type = 'triple'\n  )\n)"
    },
    {
        "question_id": 220,
        "db_id": "toxicology",
        "Original SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
        "Generated SQL": "SELECT element FROM atom\nWHERE molecule_id = 'TR000'\nORDER BY element ASC\nLIMIT 3"
    },
    {
        "question_id": 226,
        "db_id": "toxicology",
        "Original SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'",
        "Generated SQL": null
    },
    {
        "question_id": 227,
        "db_id": "toxicology",
        "Original SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
        "Generated SQL": "SELECT\n  COUNT(molecule_id) /\n  (SELECT COUNT(molecule_id) FROM molecule) * 100\nFROM molecule\nWHERE label = 'carcinogenic'"
    },
    {
        "question_id": 228,
        "db_id": "toxicology",
        "Original SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
        "Generated SQL": "SELECT 100.0 * (SELECT COUNT(*) FROM atom WHERE element = 'H') / (SELECT COUNT(*) FROM atom)"
    },
    {
        "question_id": 230,
        "db_id": "toxicology",
        "Original SQL": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
        "Generated SQL": "SELECT element, label\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE atom_id = 'TR060'"
    },
    {
        "question_id": 231,
        "db_id": "toxicology",
        "Original SQL": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
        "Generated SQL": "SELECT\n  COUNT(*) AS count,\n  bond_type\nFROM\n  bond\nWHERE\n  molecule_id = 'TR010'\nGROUP BY\n  bond_type\nORDER BY\n  count DESC\nLIMIT 1"
    },
    {
        "question_id": 232,
        "db_id": "toxicology",
        "Original SQL": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
        "Generated SQL": "SELECT label\nFROM molecule\nWHERE molecule_id IN (\n  SELECT molecule_id\n  FROM bond\n  WHERE bond_type ='single'\n  GROUP BY molecule_id\n  HAVING COUNT(*) = 2\n)\nAND molecule_id NOT IN (\n  SELECT molecule_id\n  FROM bond\n  WHERE bond_type = 'carcinogenic'\n)"
    },
    {
        "question_id": 234,
        "db_id": "toxicology",
        "Original SQL": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' OR T2.atom_id2 = T1.molecule_id || '_2'",
        "Generated SQL": "SELECT COUNT(*) FROM bond\nWHERE bond_id IN (\n  SELECT bond_id FROM connected\n  WHERE atom_id = '12'\n)"
    },
    {
        "question_id": 236,
        "db_id": "toxicology",
        "Original SQL": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'",
        "Generated SQL": "SELECT bond_type, atom_id, atom_id2\nFROM bond\nJOIN connected ON bond.bond_id = connected.bond_id\nJOIN atom ON connected.atom_id = atom.atom_id\nWHERE bond.bond_id = 'TR001_6_9'"
    },
    {
        "question_id": 239,
        "db_id": "toxicology",
        "Original SQL": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'",
        "Generated SQL": "SELECT COUNT(*) FROM connected WHERE atom_id = '19'"
    },
    {
        "question_id": 240,
        "db_id": "toxicology",
        "Original SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
        "Generated SQL": "SELECT element FROM atom\nWHERE molecule_id = \"TR004\""
    },
    {
        "question_id": 242,
        "db_id": "toxicology",
        "Original SQL": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'",
        "Generated SQL": "SELECT DISTINCT molecule.label\nFROM molecule\nJOIN atom ON atom.molecule_id = molecule.molecule_id\nJOIN connected ON connected.atom_id = atom.atom_id\nJOIN bond ON bond.bond_id = connected.bond_id\nWHERE atom.element = 'C'\nAND bond.bond_type = 'aromatic'\nAND atom.atom_id BETWEEN '21' AND '25'"
    },
    {
        "question_id": 243,
        "db_id": "toxicology",
        "Original SQL": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'",
        "Generated SQL": "SELECT *\nFROM bond\nWHERE bond.bond_type IN (\n  SELECT bond.bond_type\n  FROM bond\n  JOIN atom ON atom.atom_id = bond.atom_id\n  JOIN atom ON atom.atom_id = bond.atom_id2\n  WHERE atom.element = 'P' AND atom.element = 'N'\n)"
    },
    {
        "question_id": 244,
        "db_id": "toxicology",
        "Original SQL": "SELECT T1.label FROM molecule AS T1 INNER JOIN ( SELECT T.molecule_id, COUNT(T.bond_type) FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id ORDER BY COUNT(T.bond_type) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id",
        "Generated SQL": "SELECT label\nFROM molecule\nJOIN bond ON molecule.molecule_id = bond.molecule_id\nJOIN connected ON bond.bond_id = connected.bond_id\nGROUP BY molecule.molecule_id\nHAVING count(*) = 2\nORDER BY count(*) DESC\nLIMIT 1"
    },
    {
        "question_id": 245,
        "db_id": "toxicology",
        "Original SQL": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
        "Generated SQL": "SELECT AVG(bond_type)\nFROM bond\nJOIN atom ON atom.atom_id = bond.atom_id\nWHERE atom.element = 'Iodine'"
    },
    {
        "question_id": 247,
        "db_id": "toxicology",
        "Original SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )",
        "Generated SQL": "SELECT DISTINCT element FROM atom\nWHERE atom_id NOT IN (\n    SELECT atom_id2 FROM connected\n)"
    },
    {
        "question_id": 248,
        "db_id": "toxicology",
        "Original SQL": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
        "Generated SQL": "SELECT atom.atom_id\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN bond ON connected.bond_id = bond.bond_id\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nWHERE molecule.label = \"TR041\" AND bond.bond_type = \"triple\""
    },
    {
        "question_id": 249,
        "db_id": "toxicology",
        "Original SQL": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'",
        "Generated SQL": "SELECT element FROM atom WHERE molecule_id = 'TR144_8_19'"
    },
    {
        "question_id": 253,
        "db_id": "toxicology",
        "Original SQL": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'",
        "Generated SQL": "SELECT element FROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE bond.bond_type = 'triple'"
    },
    {
        "question_id": 255,
        "db_id": "toxicology",
        "Original SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id),5) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'",
        "Generated SQL": "SELECT\n  COUNT(*) / (SELECT COUNT(*) FROM bond)\nFROM bond\nWHERE bond_type ='single'"
    },
    {
        "question_id": 260,
        "db_id": "toxicology",
        "Original SQL": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')",
        "Generated SQL": null
    },
    {
        "question_id": 263,
        "db_id": "toxicology",
        "Original SQL": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
        "Generated SQL": "SELECT\n  COUNT(*) / (SELECT COUNT(*) FROM molecule) * 100\nFROM\n  atom\nWHERE\n  element = 'Cl'"
    },
    {
        "question_id": 268,
        "db_id": "toxicology",
        "Original SQL": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'",
        "Generated SQL": "SELECT element FROM atom\nWHERE atom_id IN (\n  SELECT atom_id FROM connected\n  WHERE bond_id = 'TR001_10_11'\n)"
    },
    {
        "question_id": 273,
        "db_id": "toxicology",
        "Original SQL": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
        "Generated SQL": "SELECT\n  COUNT(*) / (SELECT COUNT(*) FROM molecule)\nFROM\n  atom\nWHERE\n  element = 'Cl'\n  AND molecule_id IN (\n    SELECT\n      molecule_id\n    FROM\n      molecule\n    WHERE\n      label = 'carcinogenic'\n  )"
    },
    {
        "question_id": 281,
        "db_id": "toxicology",
        "Original SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7",
        "Generated SQL": null
    },
    {
        "question_id": 282,
        "db_id": "toxicology",
        "Original SQL": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label",
        "Generated SQL": "SELECT label, (SELECT COUNT(*) FROM atom WHERE element = 'H') / (SELECT COUNT(*) FROM atom) AS ratio\nFROM molecule\nWHERE molecule_id = 'TR006'"
    },
    {
        "question_id": 327,
        "db_id": "toxicology",
        "Original SQL": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t",
        "Generated SQL": "SELECT label\nFROM molecule\nWHERE molecule_id IN (\n  SELECT molecule_id\n  FROM atom\n  GROUP BY molecule_id\n  HAVING COUNT(*) > 5\n)"
    },
    {
        "question_id": 5,
        "db_id": "california_schools",
        "Original SQL": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath > 400",
        "Generated SQL": "SELECT COUNT(*)\nFROM schools\nWHERE schools.Virtual = 1\nAND schools.GSserved = 'Math'\nAND schools.AvgScrMath > 400"
    },
    {
        "question_id": 11,
        "db_id": "california_schools",
        "Original SQL": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500",
        "Generated SQL": "SELECT CDSCode FROM schools WHERE Enrollment > 500"
    },
    {
        "question_id": 12,
        "db_id": "california_schools",
        "Original SQL": "SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3",
        "Generated SQL": "SELECT MAX(Percent (%) Eligible Free (Ages 5-17))\nFROM frpm\nWHERE Percent (%) Eligible Free (Ages 5-17) > 0.3"
    },
    {
        "question_id": 17,
        "db_id": "california_schools",
        "Original SQL": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null",
        "Generated SQL": "SELECT schools.CharterNum, schools.Charter, satscores.AvgScrWrite\nFROM satscores\nINNER JOIN schools ON satscores.cds = schools.CDSCode\nWHERE satscores.AvgScrWrite > 499\nORDER BY satscores.AvgScrWrite DESC"
    },
    {
        "question_id": 23,
        "db_id": "california_schools",
        "Original SQL": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
        "Generated SQL": null
    },
    {
        "question_id": 24,
        "db_id": "california_schools",
        "Original SQL": "SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0",
        "Generated SQL": null
    },
    {
        "question_id": 25,
        "db_id": "california_schools",
        "Original SQL": "SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400",
        "Generated SQL": "SELECT DISTINCT FundingType\nFROM schools\nINNER JOIN satscores ON schools.CDSCode = satscores.cds\nWHERE County = 'Riverside'\nAND AvgScrMath > 400"
    },
    {
        "question_id": 26,
        "db_id": "california_schools",
        "Original SQL": "SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'",
        "Generated SQL": "SELECT DISTINCT s.School, s.Street, s.City, s.State\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.High Grade = '15-17'\nAND f.FRPM Count (Ages 5-17) > 800\nAND s.State = 'Monterey'"
    },
    {
        "question_id": 27,
        "db_id": "california_schools",
        "Original SQL": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'",
        "Generated SQL": "SELECT schools.Phone, schools.School, satscores.AvgScrWrite\nFROM schools\nINNER JOIN satscores\nON schools.CDSCode = satscores.cds\nWHERE schools.OpenDate > 1991 AND schools.ClosedDate < 2000\nORDER BY schools.School"
    },
    {
        "question_id": 28,
        "db_id": "california_schools",
        "Original SQL": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
        "Generated SQL": null
    },
    {
        "question_id": 31,
        "db_id": "california_schools",
        "Original SQL": "SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2",
        "Generated SQL": null
    },
    {
        "question_id": 32,
        "db_id": "california_schools",
        "Original SQL": "SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5",
        "Generated SQL": null
    },
    {
        "question_id": 37,
        "db_id": "california_schools",
        "Original SQL": "SELECT T2.Street, T2.City, T2.State, T2.Zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr ASC LIMIT 1",
        "Generated SQL": null
    },
    {
        "question_id": 36,
        "db_id": "california_schools",
        "Original SQL": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "Generated SQL": "SELECT s.AdmFName1, s.AdmLName1\nFROM schools s\nJOIN satscores ss ON s.CDSCode = ss.cds\nWHERE ss.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)"
    },
    {
        "question_id": 39,
        "db_id": "california_schools",
        "Original SQL": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'",
        "Generated SQL": "SELECT AVG(NumTstTakr)\nFROM satscores\nWHERE cds IN (SELECT CDSCode FROM schools WHERE City = 'Fresno' AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31')"
    },
    {
        "question_id": 40,
        "db_id": "california_schools",
        "Original SQL": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
        "Generated SQL": "SELECT phone\nFROM schools\nINNER JOIN satscores ON schools.CDSCode = satscores.cds\nWHERE state = 'Fresno'\nORDER BY AvgScrRead ASC\nLIMIT 1"
    },
    {
        "question_id": 41,
        "db_id": "california_schools",
        "Original SQL": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5",
        "Generated SQL": "SELECT DISTINCT schools.School\nFROM schools\nJOIN satscores ON schools.CDSCode = satscores.cds\nWHERE schools.Virtual = 1\nORDER BY satscores.AvgScrRead DESC\nLIMIT 5"
    },
    {
        "question_id": 45,
        "db_id": "california_schools",
        "Original SQL": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
        "Generated SQL": "SELECT schools.School, satscores.AvgScrWrite\nFROM schools\nJOIN satscores ON schools.CDSCode = satscores.cds\nWHERE schools.AdmFName1 = 'Ricci' AND schools.AdmLName1 = 'Ulrich'"
    },
    {
        "question_id": 46,
        "db_id": "california_schools",
        "Original SQL": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
        "Generated SQL": null
    },
    {
        "question_id": 47,
        "db_id": "california_schools",
        "Original SQL": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
        "Generated SQL": "SELECT COUNT(DISTINCT schools.County)\nFROM schools\nWHERE schools.County = 'Alameda County'\nAND schools.OpenDate BETWEEN '1980-01-01' AND '1980-12-31'"
    },
    {
        "question_id": 48,
        "db_id": "california_schools",
        "Original SQL": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
        "Generated SQL": null
    },
    {
        "question_id": 50,
        "db_id": "california_schools",
        "Original SQL": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
        "Generated SQL": "SELECT DISTINCT schools.School\nFROM schools\nINNER JOIN satscores ON schools.CDSCode = satscores.cds\nWHERE satscores.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)"
    },
    {
        "question_id": 62,
        "db_id": "california_schools",
        "Original SQL": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18",
        "Generated SQL": "SELECT COUNT(*) FROM schools\nWHERE County = 'Los Angeles'\nAND Charter = 0\nAND Percent (%) Eligible Free (K-12) < 0.18%"
    },
    {
        "question_id": 72,
        "db_id": "california_schools",
        "Original SQL": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015",
        "Generated SQL": "SELECT COUNT(*)\nFROM frpm\nWHERE frpm.School = 'State Special School'\nAND frpm.Academic Year = '2014-2015'\nAND frpm.Low Grade <= 5\nAND frpm.High Grade >= 17"
    },
    {
        "question_id": 77,
        "db_id": "california_schools",
        "Original SQL": "SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'",
        "Generated SQL": "SELECT *\nFROM schools\nWHERE County = 'Los Angeles'\nAND Percent (%) Eligible FRPM (Ages 5-17)"
    },
    {
        "question_id": 79,
        "db_id": "california_schools",
        "Original SQL": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1",
        "Generated SQL": "SELECT COUNT(DISTINCT schools.County)\nFROM schools\nWHERE schools.County IN ('San Diego', 'Santa Barbara')\nAND schools.County NOT IN (\n    SELECT schools.County\n    FROM schools\n    WHERE schools.County IN ('San Diego', 'Santa Barbara')\n    AND schools.GSoffered = 'Physical Building'\n)"
    },
    {
        "question_id": 82,
        "db_id": "california_schools",
        "Original SQL": "SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1",
        "Generated SQL": "SELECT DISTINCT(High Grade) FROM frpm\nWHERE Longitude = (SELECT MAX(Longitude) FROM frpm)"
    },
    {
        "question_id": 83,
        "db_id": "california_schools",
        "Original SQL": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City",
        "Generated SQL": "SELECT COUNT(DISTINCT City)\nFROM schools\nWHERE Magnet = 1\nAND LowGrade = 'K'\nAND HighGrade = '8'\nAND (\n    SELECT COUNT(DISTINCT School)\n    FROM schools\n    WHERE Magnet = 1\n    AND LowGrade = 'K'\n    AND HighGrade = '8'\n) > 1"
    },
    {
        "question_id": 85,
        "db_id": "california_schools",
        "Original SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
        "Generated SQL": "SELECT Percent (%) Eligible Free (K-12)\nFROM frpm\nWHERE AdmFName1 = 'Alusine'"
    },
    {
        "question_id": 87,
        "db_id": "california_schools",
        "Original SQL": "SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62",
        "Generated SQL": "SELECT DISTINCT AdmEmail1, AdmEmail2, AdmEmail3\nFROM schools\nWHERE County = 'San Bernardino'\nAND City = 'City of San Bernardino'\nAND StatusType = 'Public Intermediate/Middle Schools'\nAND StatusType = 'Unified Schools'\nAND OpenDate BETWEEN '2009-01-01' AND '2010-12-31'"
    },
    {
        "question_id": 89,
        "db_id": "financial",
        "Original SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
        "Generated SQL": "SELECT COUNT(*)\nFROM account\nWHERE district_id = (SELECT district_id\n                     FROM district\n                     WHERE A8 = 'East Bohemia')"
    },
    {
        "question_id": 92,
        "db_id": "financial",
        "Original SQL": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
        "Generated SQL": "SELECT COUNT(*) FROM district\nWHERE A13 > 6000 AND A13 < 10000 AND A14 = 'F'"
    },
    {
        "question_id": 93,
        "db_id": "financial",
        "Original SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
        "Generated SQL": null
    },
    {
        "question_id": 94,
        "db_id": "financial",
        "Original SQL": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
        "Generated SQL": null
    },
    {
        "question_id": 95,
        "db_id": "financial",
        "Original SQL": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id",
        "Generated SQL": null
    },
    {
        "question_id": 98,
        "db_id": "financial",
        "Original SQL": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
        "Generated SQL": "SELECT account_id\nFROM account\nWHERE approved_date = '1997-01-01'\nORDER BY amount ASC\nLIMIT 1"
    },
    {
        "question_id": 99,
        "db_id": "financial",
        "Original SQL": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
        "Generated SQL": "SELECT account_id\nFROM account\nWHERE account_id IN (\n    SELECT account_id\n    FROM loan\n    WHERE duration > 12\n)\nAND date(date) = '1993-01-01'\nAND amount = (\n    SELECT MAX(amount)\n    FROM loan\n    WHERE duration > 12\n    AND date(date) = '1993-01-01'\n)"
    },
    {
        "question_id": 100,
        "db_id": "financial",
        "Original SQL": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'",
        "Generated SQL": "SELECT COUNT(*) FROM account\nJOIN client ON account.client_id = client.client_id\nJOIN district ON client.district_id = district.district_id\nWHERE client.gender = 'F'\nAND client.birth_date < '1950-01-01'\nAND district.A2 = 'Sokolov'"
    },
    {
        "question_id": 112,
        "db_id": "financial",
        "Original SQL": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
        "Generated SQL": "SELECT district_id\nFROM client\nWHERE gender = 'F'\n  AND birth_date = '1976-01-29'"
    },
    {
        "question_id": 115,
        "db_id": "financial",
        "Original SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
        "Generated SQL": "SELECT A8, A10, A11, A12, A13, A14, A15, A16 FROM district\nWHERE A2 = 'South Bohemia'\nORDER BY A8 DESC\nLIMIT 1"
    },
    {
        "question_id": 116,
        "db_id": "financial",
        "Original SQL": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
        "Generated SQL": null
    },
    {
        "question_id": 117,
        "db_id": "financial",
        "Original SQL": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
        "Generated SQL": "SELECT\n  COUNT(loan.amount) / SUM(loan.amount) AS percentage\nFROM loan\nWHERE loan.status = 'paid'"
    },
    {
        "question_id": 118,
        "db_id": "financial",
        "Original SQL": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
        "Generated SQL": "SELECT\n  100.0 * COUNT(*) / COUNT(DISTINCT account_id) AS percentage\nFROM\n  loan\nWHERE\n  amount < 100000\n  AND status = 'running'"
    },
    {
        "question_id": 125,
        "db_id": "financial",
        "Original SQL": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
        "Generated SQL": "SELECT A2, A3, (A10 - A11) / A10 * 100\nFROM district\nWHERE A8 = 1995 AND A8 = 1996 AND A8 = 1995 AND A8 = 1996"
    },
    {
        "question_id": 128,
        "db_id": "financial",
        "Original SQL": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
        "Generated SQL": "SELECT A2, COUNT(*)\nFROM district\nJOIN client ON district.district_id = client.district_id\nWHERE gender = 'F'\nGROUP BY A2\nORDER BY COUNT(*) DESC\nLIMIT 9"
    },
    {
        "question_id": 136,
        "db_id": "financial",
        "Original SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000",
        "Generated SQL": "SELECT COUNT(*)\nFROM loan\nWHERE account_id IN (\n  SELECT account_id\n  FROM account\n  WHERE date BETWEEN '1995-01-01' AND '1997-12-31'\n)\nAND amount >= 250000\nAND frequency ='monthly'\nAND status = 'approved'"
    },
    {
        "question_id": 137,
        "db_id": "financial",
        "Original SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
        "Generated SQL": "SELECT COUNT(*) FROM account\nWHERE account_id IN (\n  SELECT account_id FROM disp\n  WHERE disp_id IN (\n    SELECT disp_id FROM disp\n    WHERE type = 'Branch'\n  )\n  AND type = 'Contract'\n)"
    },
    {
        "question_id": 138,
        "db_id": "financial",
        "Original SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
        "Generated SQL": "SELECT COUNT(*)\nFROM client\nWHERE gender = 'M'\nAND district_id IN (\n    SELECT district_id\n    FROM district\n    WHERE A2 = (\n        SELECT A2\n        FROM district\n        WHERE A2 IS NOT NULL\n        ORDER BY A2 DESC\n        LIMIT 1, 1\n    )\n)"
    },
    {
        "question_id": 129,
        "db_id": "financial",
        "Original SQL": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10",
        "Generated SQL": "SELECT A8, A9, A10, A11, A12, A13, A14, A15, A16\nFROM district"
    },
    {
        "question_id": 137,
        "db_id": "financial",
        "Original SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
        "Generated SQL": "SELECT COUNT(*) FROM account\nWHERE account_id IN (\n  SELECT account_id FROM disp\n  WHERE disp_id IN (\n    SELECT disp_id FROM disp\n    WHERE type = 'Branch'\n  )\n  AND type = 'Contract'\n)"
    },
    {
        "question_id": 138,
        "db_id": "financial",
        "Original SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
        "Generated SQL": "SELECT COUNT(*)\nFROM client\nWHERE gender = 'M'\nAND district_id IN (\n    SELECT district_id\n    FROM district\n    WHERE A2 = (\n        SELECT A2\n        FROM district\n        WHERE A2 IS NOT NULL\n        ORDER BY A2 DESC\n        LIMIT 1, 1\n    )\n)"
    },
    {
        "question_id": 145,
        "db_id": "financial",
        "Original SQL": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')",
        "Generated SQL": "SELECT account_id\nFROM account\nWHERE account_id IN (\n    SELECT account_id\n    FROM trans\n    WHERE type = 'credit card'\n    AND amount < (\n        SELECT AVG(amount)\n        FROM trans\n        WHERE type = 'credit card'\n        AND date = '1998-01-01'\n    )\n)"
    },
    {
        "question_id": 149,
        "db_id": "financial",
        "Original SQL": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000",
        "Generated SQL": null
    },
    {
        "question_id": 152,
        "db_id": "financial",
        "Original SQL": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000",
        "Generated SQL": null
    },
    {
        "question_id": 159,
        "db_id": "financial",
        "Original SQL": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
        "Generated SQL": "SELECT * FROM trans\nWHERE client_id = 3356 AND type = 'cash' AND operation = 'withdrawal'"
    },
    {
        "question_id": 168,
        "db_id": "financial",
        "Original SQL": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
        "Generated SQL": "SELECT\n  COUNT(*) /\n  (SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district WHERE A10 > 10000))\nFROM client\nWHERE district_id = (SELECT district_id FROM district WHERE A10 > 10000)\n  AND gender = 'F'"
    },
    {
        "question_id": 169,
        "db_id": "financial",
        "Original SQL": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
        "Generated SQL": null
    },
    {
        "question_id": 173,
        "db_id": "financial",
        "Original SQL": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
        "Generated SQL": "SELECT frequency\nFROM account\nWHERE account_id = 3"
    },
    {
        "question_id": 186,
        "db_id": "financial",
        "Original SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'",
        "Generated SQL": "SELECT\n  COUNT(CASE WHEN gender = 'M' THEN 1 END) / COUNT(*)\nFROM\n  client"
    },
    {
        "question_id": 189,
        "db_id": "financial",
        "Original SQL": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id  WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1",
        "Generated SQL": "SELECT DISTINCT account_id\nFROM client\nJOIN account ON client.client_id = account.account_id\nWHERE gender = 'F'\nORDER BY birth_date, avg(salary) ASC\nLIMIT 1"
    },
    {
        "question_id": 192,
        "db_id": "financial",
        "Original SQL": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'",
        "Generated SQL": null
    },
    {
        "question_id": 194,
        "db_id": "financial",
        "Original SQL": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
        "Generated SQL": "SELECT client_id, age(birth_date)\nFROM client\nINNER JOIN card ON client.client_id = card.client_id\nINNER JOIN account ON card.account_id = account.account_id\nINNER JOIN loan ON account.account_id = loan.account_id\nWHERE card.type = 'credit' AND loan.status = 'approved'"
    }
]